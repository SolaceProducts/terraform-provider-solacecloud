{
   "openapi": "3.0.1",
   "info": {
      "title": "MISSION CONTROL",
      "description": "Documentation for Mission Control API",
      "version": "2.0.0"
   },
   "servers": [
      {
         "url": "https://api.solace.cloud",
         "description": "Solace PubSub+ Cloud US EAST Region"
      },
      {
         "url": "https://api.solacecloud.com.au",
         "description": "Solace PubSub+ Cloud AU Region"
      },
      {
         "url": "https://api.solacecloud.eu",
         "description": "Solace PubSub+ Cloud EU Region"
      },
      {
         "url": "https://api.solacecloud.sg",
         "description": "Solace PubSub+ Cloud SG Region"
      }
   ],
   "security": [
      {
         "bearerAuth": []
      }
   ],
   "paths": {
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/broker/SEMP/v2/config/{resourcePath}/**": {
         "get": {
            "tags": [
               "Broker Configuration Using SEMP Proxy"
            ],
            "summary": "(Beta) Get a specific resource object for an event broker service by the object path using a SEMP GET",
            "description": "<p>Get the details for a resource object using the unique identifier for the event broker service and the resource object path.</p><p><b>Note:</b> The Try It! feature for this API does not work. To use this API, you must:\n<ol><li>Copy the URL to another program.</li>\n<li>Remove the <code>/**</code> appended to the end of the URL.</li>\n<li>Replace the variables in the URL as specified in the PATH PARAMS.</li>\n</ol></p>\n<p>For more information, see <a href=https://docs.solace.com/Cloud/enable-oauth-profiles-on-service.htm>Configuring OAuth Profiles for Management Access to Event Broker Services</a> in the Solace documentation.</p>\n<p>This SEMP API supports the following SEMP objects only:\n<ul><li>[oauthProfiles]</li></ul>\n</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` **or** `services:get:self` ]",
            "operationId": "getResource",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "resourcePath",
                  "in": "path",
                  "description": "The resource path for the resource object you want to retrieve using the SEMP request, for example oauthProfiles/profile1.\nSee <a href=\"objects\">Objects</a> for resource path formatting.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "customQuery",
                  "in": "query",
                  "description": "The query parameters to pass as part of the SEMP request when retrieving resource objects from the event broker service. For example, you can build the URL as follows:\nbroker/SEMP/v2/config/oauthProfiles/testOAuth?select=msgVpnName,queueName&where=msgVpnName==test&count=25&cursor=1\nSee <a href=\"objects\">Objects</a> for query parameters.",
                  "style": "form",
                  "explode": true,
                  "schema": {
                     "type": "object"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A JSON object returned by the event broker service that describes the resource object’s attributes and contains requested metadata.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "string"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {}
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {}
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "put": {
            "tags": [
               "Broker Configuration Using SEMP Proxy"
            ],
            "summary": "(Beta) Replace a resource object on an event broker service using a SEMP PUT",
            "description": "<p>To replace a resource object on an event broker service using a SEMP PUT.</p><p><b>Note:</b> The Try It! feature for this API does not work. To use this API, you must:\n<ol><li>Copy the URL to another program.</li>\n<li>Remove the <code>/**</code> appended to the end of the URL.</li>\n<li>Replace the variables in the URL as specified in the PATH PARAMS.</li>\n</ol></p>\n<p>For more information, see <a href=https://docs.solace.com/Cloud/enable-oauth-profiles-on-service.htm>Configuring OAuth Profiles for Management Access to Event Broker Services</a> in the Solace documentation.</p>\n<p>This SEMP API supports the following SEMP objects only:\n<ul><li>[oauthProfiles]</li></ul>\n</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:post` ]",
            "operationId": "replaceResource",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "resourcePath",
                  "in": "path",
                  "description": "The resource path where you want to replace a resource object using the SEMP request, for example, oauthProfiles/profile1.\nSee <a href=\"objects\">Objects</a> for resource path formatting.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The replacement resource object’s attributes and values in JSON format.",
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "string"
                     },
                     "example": "{\"enabled\":true,\"oauthProfileName\":\"profile1\",\"oauthRole\":\"client\",\"resourceServerParseAccessTokenEnabled\":false,\"resourceServerValidateAudienceEnabled\":false,\"resourceServerValidateIssuerEnabled\":false,\"resourceServerValidateScopeEnabled\":false,\"resourceServerValidateTypeEnabled\":false,\"sempEnabled\":false}"
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "A JSON object returned by the event broker service after replacing the resource object. The JSON object describes the replacement resource object’s attributes in name/value pairs.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "string"
                        },
                        "example": "{\"data\":{\"description\":\"SolaceAdmin Group\",\"globalAccessLevel\":\"read-only\",\"groupName\":\"SolaceAdmin\",\"msgVpnAccessLevel\":\"read-write\",\"oauthProfileName\":\"profile1\"},\"links\":{\"msgVpnAccessLevelExceptionsUri\":\"https://mr-connection-cqifyqi5l0x.messaging.mymaas.net:943/SEMP/v2/config/oauthProfiles/profile1/accessLevelGroups/SolaceAdmin/msgVpnAccessLevelExceptions\",\"uri\":\"https://mr-connection-cqifyqi5l0x.messaging.mymaas.net:943/SEMP/v2/config/oauthProfiles/profile1/accessLevelGroups/SolaceAdmin\"},\"meta\":{\"request\":{\"method\":\"PUT\",\"uri\":\"https://mr-connection-cqifyqi5l0x.messaging.mymaas.net:943/SEMP/v2/config/oauthProfiles/profile1/accessLevelGroups/SolaceAdmin\"},\"responseCode\":200}}"
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/BrokerSempProxyError"
                        },
                        "example": {
                           "meta": {
                              "error": {
                                 "code": "0",
                                 "description": "An entity of the type OAuth profile was passed in an invalid format.",
                                 "status": "SOLACE_CLOUD_CUSTOM_OAUTH_VALIDATION_FAILURE"
                              },
                              "request": {
                                 "method": "PUT",
                                 "uri": "/api/v2/missionControl/eventBrokerServices/v4qyo12tlvb/broker/SEMP/v2/config/oauthProfiles/profile1"
                              },
                              "responseCode": 400
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {}
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "post": {
            "tags": [
               "Broker Configuration Using SEMP Proxy"
            ],
            "summary": "(Beta) Create a resource object for an event broker service using a SEMP POST",
            "description": "<p>To create a resource object for event broker service using a SEMP POST.</p><p><b>Note:</b> The Try It! feature for this API does not work. To use this API, you must:\n<ol><li>Copy the URL to another program.</li>\n<li>Remove the <code>/**</code> appended to the end of the URL.</li>\n<li>Replace the variables in the URL as specified in the PATH PARAMS.</li>\n</ol></p>\n<p>For more information, see <a href=https://docs.solace.com/Cloud/enable-oauth-profiles-on-service.htm>Configuring OAuth Profiles for Management Access to Event Broker Services</a> in the Solace documentation.</p>\n<p>This SEMP API supports the following SEMP objects only:\n<ul><li>[oauthProfiles]</li></ul>\n</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:post` ]",
            "operationId": "createResource",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "resourcePath",
                  "in": "path",
                  "description": "The resource path where you want to create the resource object using the SEMP request, for example, oauthProfiles.\nSee <a href=\"objects\">Objects</a> for resource path information.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The attributes of the resource object you want to create, and their values, in JSON format.",
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "string"
                     },
                     "example": "{\"accessLevelGroupsClaimName\":\"groups\",\"clientId\":\"example123\",\"clientRedirectUri\":\"\",\"clientRequiredType\":\"JWT\",\"clientScope\":\"openid email\",\"clientSecret\":\"example456\",\"clientValidateTypeEnabled\":false,\"defaultGlobalAccessLevel\":\"none\",\"defaultMsgVpnAccessLevel\":\"none\",\"displayName\":\"\",\"enabled\":true,\"endpointAuthorization\":\"\",\"endpointDiscovery\":\"https://example.accounts.ondemand.com/.well-known/openid-configuration\",\"endpointDiscoveryRefreshInterval\":86400,\"endpointIntrospection\":\"\",\"endpointIntrospectionTimeout\":10,\"endpointJwks\":\"\",\"endpointJwksRefreshInterval\":86400,\"endpointToken\":\"\",\"endpointTokenTimeout\":10,\"endpointUserinfo\":\"\",\"endpointUserinfoTimeout\":10,\"interactiveEnabled\":true,\"interactivePromptForExpiredSession\":\"\",\"interactivePromptForNewSession\":\"select_account\",\"issuer\":\"\",\"oauthProfileName\":\"profile1\",\"oauthRole\":\"client\",\"resourceServerParseAccessTokenEnabled\":true,\"resourceServerRequiredAudience\":\"\",\"resourceServerRequiredIssuer\":\"\",\"resourceServerRequiredScope\":\"\",\"resourceServerRequiredType\":\"at+jwt\",\"resourceServerValidateAudienceEnabled\":true,\"resourceServerValidateIssuerEnabled\":true,\"resourceServerValidateScopeEnabled\":true,\"resourceServerValidateTypeEnabled\":true,\"sempEnabled\":false,\"usernameClaimName\":\"sub\"}"
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "A JSON object returned by the event broker service after resource object creation. The JSON object describes the resource object’s properties in name/value pairs.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "string"
                        },
                        "example": "{\"data\":{\"allowedHost\":\"mr-connection-cqifyqi5l0x.messaging.mymaas.net:943\",\"oauthProfileName\":\"profile1\"},\"links\":{\"uri\":\"https://mr-connection-cqifyqi5l0x.messaging.mymaas.net:943/SEMP/v2/config/oauthProfiles/profile1/clientAllowedHosts/mr-connection-cqifyqi5l0x.messaging.mymaas.net%3A943\"},\"meta\":{\"request\":{\"method\":\"POST\",\"uri\":\"https://mr-connection-cqifyqi5l0x.messaging.mymaas.net:943/SEMP/v2/config/oauthProfiles/profile1/clientAllowedHosts\"},\"responseCode\":200}}"
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/BrokerSempProxyError"
                        },
                        "example": {
                           "meta": {
                              "error": {
                                 "code": "0",
                                 "description": "An entity of the type OAuth profile was passed in an invalid format.",
                                 "status": "SOLACE_CLOUD_CUSTOM_OAUTH_VALIDATION_FAILURE"
                              },
                              "request": {
                                 "method": "POST",
                                 "uri": "/api/v2/missionControl/eventBrokerServices/v4qyo12tlvb/broker/SEMP/v2/config/oauthProfiles"
                              },
                              "responseCode": 400
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {}
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "delete": {
            "tags": [
               "Broker Configuration Using SEMP Proxy"
            ],
            "summary": "(Beta) Delete a resource object on an event broker service by object path using a SEMP DELETE",
            "description": "<p>To delete a resource object on an event broker service using the unique identifier for the event broker service and the resource object path.</p><p><b>Note:</b> The Try It! feature for this API does not work. To use this API, you must:\n<ol><li>Copy the URL to another program.</li>\n<li>Remove the <code>/**</code> appended to the end of the URL.</li>\n<li>Replace the variables in the URL as specified in the PATH PARAMS.</li>\n</ol></p>\n<p>For more information, see <a href=https://docs.solace.com/Cloud/enable-oauth-profiles-on-service.htm>Configuring OAuth Profiles for Management Access to Event Broker Services</a> in the Solace documentation.</p>\n<p>This SEMP API supports the following SEMP objects only:\n<ul><li>[oauthProfiles]</li></ul>\n</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:post` ]",
            "operationId": "deleteResource",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "resourcePath",
                  "in": "path",
                  "description": "The resource path for the resource object you want to delete using the SEMP DELETE request, for example oauthProfiles/profile1.\nSee <a href=\"objects\">Objects</a> for resource path formatting.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A JSON object with metadata returned from the event broker service after deleting the resource object.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "string"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {}
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {}
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "patch": {
            "tags": [
               "Broker Configuration Using SEMP Proxy"
            ],
            "summary": "(Beta) Update a resource object on an event broker service using a SEMP PATCH",
            "description": "<p>To update a resource object on an event broker service using a SEMP PATCH.</p><p><b>Note:</b> The Try It! feature for this API does not work. To use this API, you must:\n<ol><li>Copy the URL to another program.</li>\n<li>Remove the <code>/**</code> appended to the end of the URL.</li>\n<li>Replace the variables in the URL as specified in the PATH PARAMS.</li>\n</ol></p>\n<p>For more information, see <a href=https://docs.solace.com/Cloud/enable-oauth-profiles-on-service.htm>Configuring OAuth Profiles for Management Access to Event Broker Services</a> in the Solace documentation.</p>\n<p>This SEMP API supports the following SEMP objects only:\n<ul><li>[oauthProfiles]</li></ul>\n</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:post` ]",
            "operationId": "patchResource",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "resourcePath",
                  "in": "path",
                  "description": "The resource path for the resource object you want to update using the SEMP PATCH request, for example oauthProfiles/profile1.\nSee <a href=\"objects\">Objects</a> for resource path formatting.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The object's attributes in JSON.",
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "string"
                     },
                     "example": "{\"enabled\":true,\"oauthProfileName\":\"profile1\",\"oauthRole\":\"client\",\"resourceServerParseAccessTokenEnabled\":true,\"resourceServerValidateAudienceEnabled\":true,\"resourceServerValidateIssuerEnabled\":true,\"resourceServerValidateScopeEnabled\":true,\"resourceServerValidateTypeEnabled\":true,\"sempEnabled\":true}"
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "A JSON object returned by the event broker service after updating the resource object’s attributes. The JSON object describes the resource object’s attributes after being updated in name/value pairs.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "string"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/BrokerSempProxyError"
                        },
                        "example": {
                           "meta": {
                              "error": {
                                 "code": "0",
                                 "description": "An entity of the type OAuth profile was passed in an invalid format.",
                                 "status": "SOLACE_CLOUD_CUSTOM_OAUTH_VALIDATION_FAILURE"
                              },
                              "request": {
                                 "method": "PATCH",
                                 "uri": "/api/v2/missionControl/eventBrokerServices/v4qyo12tlvb/broker/SEMP/v2/config/oauthProfiles/profile1"
                              },
                              "responseCode": 400
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {}
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/clientProfiles": {
         "get": {
            "tags": [
               "Client Profiles"
            ],
            "summary": "Get a list of client profiles",
            "description": "<p>Get the client profiles that are available for the event broker sevice.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` **or** `services:get:self` **or** `services:view` **or** `services:view:self` ]",
            "operationId": "getClientProfiles",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "pageNumber",
                  "in": "query",
                  "description": "The page number to retrieve.",
                  "required": false,
                  "schema": {
                     "minimum": 1,
                     "type": "integer",
                     "default": 1
                  }
               },
               {
                  "name": "pageSize",
                  "in": "query",
                  "description": "The number of client profiles to return per page.",
                  "required": false,
                  "schema": {
                     "maximum": 100,
                     "minimum": 1,
                     "type": "integer",
                     "default": 100
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "The sorting criteria for the list of client profiles.",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "name:asc",
                     "default": "name:asc"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ClientProfilesResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "post": {
            "tags": [
               "Client Profiles"
            ],
            "summary": "Create a client profile",
            "description": "<p>Create a client profile for the specified event broker service. You can optionally configure permissions for the client profile when creating it.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `service_requests:post:client_profile` ]",
            "operationId": "createClientProfile",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The new client profile specification.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/ClientProfileRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An entity of type client profile was passed in an invalid format.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec",
                           "validationDetails": {
                              "name": [
                                 "must not be blank"
                              ]
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/clientProfiles/{name}": {
         "get": {
            "tags": [
               "Client Profiles"
            ],
            "summary": "Get a specific client profile for event broker service by name",
            "description": "<p>Get the details of a client profile using its name.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` **or** `services:get:self` **or** `services:view` **or** `services:view:self` ]",
            "operationId": "getClientProfile",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "path",
                  "description": "The name of the client profile.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ClientProfileResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the client profile with name, some_name.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "put": {
            "tags": [
               "Client Profiles"
            ],
            "summary": "Replace a client profile",
            "description": "<p>Replace the configuration of an existing client profile. You can provide any combination of supported fields. If a field is not provided, then it will be set to default value.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `service_requests:post:client_profile` ]",
            "operationId": "replaceClientProfile",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "path",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The fields to update the configuration for the client profile.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/ClientProfileRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "A JSON parse error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the client profile with name, some_name.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "delete": {
            "tags": [
               "Client Profiles"
            ],
            "summary": "Delete a client profile",
            "description": "<p>Delete a client profile using the identifier for the event broker service and the name of the client profile.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `service_requests:post:client_profile` ]",
            "operationId": "deleteClientProfile",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "path",
                  "description": "The name of the client profile.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "202": {
                  "description": "Operation accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the client profile with name, some_name.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "patch": {
            "tags": [
               "Client Profiles"
            ],
            "summary": "Update a client profile",
            "description": "<p>Update the configuration of an existing client profile. You can provide any combination of supported fields. If a field is not provided, then it will not be updated.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `service_requests:post:client_profile` ]",
            "operationId": "updateClientProfile",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "path",
                  "description": "The name of the client profile.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The configuration to update for the client profile.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/ClientProfileRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "A JSON parse error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the client profile with name, some_name.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/environments/{id}": {
         "get": {
            "tags": [
               "Environments"
            ],
            "summary": "(Beta) Get details of an environment in Mission Control",
            "description": "<p>Get the Mission Control-specific details of an environment.</p> <p> Your token must have one of the permissions listed in the Token Permissions. </p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `environments:view` ]",
            "operationId": "getEnvironment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the environment.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/EnvironmentResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Access Denied.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Subject does not have permission [environments:view]",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find environment environmentId",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "patch": {
            "tags": [
               "Environments"
            ],
            "summary": "(Beta) Update details for an environment in Mission Control",
            "description": "<p>Update the Mission Control-specific details of an environment. You can provide any combination of supported fields. If a field is not provided, then it will not be updated. </p><p> Your token must have one of the permissions listed in the Token Permissions. </p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `environments:edit` ]",
            "operationId": "patchEnvironment",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the environment.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/EnvironmentRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/EnvironmentResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Access Denied.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Subject does not have permission [environments:edit]",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find environment environmentId",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/datacenters": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a list of datacenters",
            "description": "Get the datacenters that are available for the account (or organization).<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `dc:get` ]",
            "operationId": "getDatacenters",
            "parameters": [
               {
                  "name": "pageNumber",
                  "in": "query",
                  "description": "The page number to retrieve.",
                  "required": false,
                  "schema": {
                     "minimum": 1,
                     "type": "integer",
                     "default": 1
                  }
               },
               {
                  "name": "pageSize",
                  "in": "query",
                  "description": "The number of datacenters to return per page.",
                  "required": false,
                  "schema": {
                     "maximum": 100,
                     "minimum": 1,
                     "type": "integer",
                     "default": 100
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "<p>The sorting criteria for the returned results. You can sort the results by query\nparameter in ascending or descending order. Define the sort order using the following string:\n<code>fieldname:asc/desc</code> where:</p>\n<ul>\n        <li><code>fieldname</code>—The field name of the query parameter to sort by.</li>\n        <li><code>asc</code>—Sort the selected field name in ascending order.</li>\n        <li><code>desc</code>—Sort the selected field name in descending order.</li>\n</ul>\n<p>You can use multiple query parameters to refine the sorting order.</p>",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "name:asc,datacenterType:asc",
                     "default": "name:asc,datacenterType:asc"
                  }
               },
               {
                  "name": "datacenterType",
                  "in": "query",
                  "description": "<p>Filter the returned query results by datacenter type. The filtering options include:</p>\n<ul>\n        <li>'<code>Empty</code>'—Returns all datacenter types.</li>\n        <li>'<code>Unknown</code>'—Returns any datacenters where the <code>datacenterType</code>\n        is not set.</li>\n        <li>'<code>SolacePublic</code>'—Known as Public Regions. Public Regions are cloud-based,\n        managed datacenters shared between customers.</li>\n        <li>'<code>SolaceDedicated</code>'—Known as Dedicated Regions. Dedicated Regions are\n        cloud-based, managed datacenters dedicated to a single-customer.</li>\n        <li>'<code>CustomerControlled</code>'—Cloud-based Customer-Controlled Regions.</li>\n        <li>'<code>CustomerOnPrem</code>'—On-premises Customer-Controlled Regions.</li>\n</ul>",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "Unknown",
                        "SolacePublic",
                        "SolaceDedicated",
                        "CustomerCloud",
                        "CustomerOnPrem"
                     ]
                  }
               },
               {
                  "name": "provider",
                  "in": "query",
                  "description": "<p>Filter the returned query results by Kubernetes provider type.\nThe filtering options include:</p>\n<ul>\n        <li>'<code>aks</code>'-Azure Kubernetes Service.</li>\n        <li>‘<code>eks</code>’-AWS Elastic Kubernetes Service.</li>\n        <li>‘<code>gce</code>’-Google Kubernetes Engine.</li>\n        <li>‘<code>k8s</code>’-Other Kubernetes provider.</li>\n        <li>‘<code>aws</code>’-(deprecated) VM-based on Amazon Web Services.</li>\n        <li>‘<code>azure</code>’-(deprecated) VM-based on Azure.</li>\n</ul>",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "aks",
                        "aws",
                        "azure",
                        "eks",
                        "gcp",
                        "k8s"
                     ]
                  }
               },
               {
                  "name": "environmentId",
                  "in": "query",
                  "description": "<p>Filter the returned query results by an environment's unique identifier. You cannot filter public datacenters using an environment's unique identifier.</p>\n",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "abcd1234"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/DatacentersResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/datacenters/{id}": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a specific datacenter by identifier",
            "description": "Get the details of a datacenter using its identifier.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `dc:get` ]",
            "operationId": "getDatacenter",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the datacenter.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/DatacenterResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the datacenter with id gke-gcp-us-central1-a.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "patch": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Update a datacenter's environment",
            "description": "Update a datacenter's environment using the environment's unique identifier.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `dc:put` ]",
            "operationId": "updateDatacenter",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the datacenter.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/DatacenterRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/DatacenterResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the datacenter with id gke-gcp-us-central1-a.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/datacenters/{id}/eventBrokerServiceVersions": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a list of available software event broker versions",
            "description": "Get the software event broker versions available in the datacenter to create event broker services.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `event_broker_versions:get` ]",
            "operationId": "getEventBrokerServiceVersions",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the datacenter.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/EventBrokerServiceVersionsResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/defaultBrokerVersions": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "(Beta) Get event broker versions",
            "description": "Get the default version number used for event broker service creation in a specific datacenter. Note that the default version used for event broker service creation may not be the same as the latest event broker service version.",
            "operationId": "getVersions",
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/EventBrokerVersionsResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad Request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     },
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "forbidden"
               },
               "404": {
                  "description": "Entity Not Found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a list of event broker services",
            "description": "<p>Get a listing of event broker services.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` **or** `services:get:self` **or** `services:view` **or** `services:view:self` ]",
            "operationId": "getServices",
            "parameters": [
               {
                  "name": "customAttributes",
                  "in": "query",
                  "description": "<p>Filter the list of event broker services by custom attributes.</p><p>To filter by custom attribute name and value, use the format: <code>customAttributes=&lt;custom-attribute-name&gt;==&lt;custom-attribute-value&gt;</code>.</p><code>customAttributes</code> are RSQL query strings that support using asterisks as a wildcard. You can place a wildcard at the beginning, middle, or end of the query value.</p><p>The supported attributes, and examples of each are listed below:</p><ul>\n<li><code>name</code>, examples include:</li>\n<ul>\n<li><code>name==myservice</code></li>\n<li><code>name==production*</code></li>\n<li><code>name==*prod*</code></li>\n</ul>\n<li><code>ownedBy</code>, examples include:</li>\n<ul>\n<li><code>ownedBy==userId</code></li>\n</ul>\n<li><code>environmentId</code>, examples include:</li>\n<ul>\n<li><code>environmentId==12345</code></li>\n<li><code>environmentId!=345678</code></li>\n</ul>\n</ul>",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "name==someName"
                  }
               },
               {
                  "name": "expand",
                  "in": "query",
                  "description": "<p>Additional information to retrieve for the event broker service. The supported value is <code>allowedActions</code>.</p><p>The returned <code>allowedActions</code> may include: '<code>get</code>', '<code>messageSpoolDetails</code>', '<code>configure</code>', '<code>update</code>', '<code>broker_update</code>', '<code>delete</code>', '<code>assign</code>'.</p><p>The definitions for each action are listed below:</p><li><code>get</code> The user can get the event broker service.</li>\n<li><code>messageSpoolDetails</code> The user can get the message spool details.</li>\n<li><code>configure</code> The user can configure the event broker service, for example, to add a new client profile.</li>\n<li><code>update</code> The user can update the event broker service configurations.</li>\n<li><code>broker_update</code> The user can update the event broker service message vpn configuration.</li>\n<li><code>delete</code> The user can delete the event broker service.</li>\n<li><code>assign</code> The user can assign the event broker service to other users.</li>\n",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "allowedActions"
                  }
               },
               {
                  "name": "sort",
                  "in": "query",
                  "description": "<p>Sort the returned event broker services by attribute.</p><p>You can use the following value formats for the sort order:</p><ul>\n<li><code>attributes-names</code></li>\n<li><code>attributes-names:sort-order</code></li>\n</ul><p>Add <code>attribute-names</code> in a comma-separated list in the order you want to sort them by.</p><p>Use the <code>sort-order</code> to sort the attributes using one of the following values:</p><ul>\n<li>‘<code>asc</code>’-ascending order</li>\n<li>‘<code>desc</code>’-descending order</li>\n</ul><p>If you do not define a sort order, it will default to ascending order.\nThese are support attribute names you can sort by:</p><ul>\n<li>name</li>\n<li>adminState</li>\n<li>creationState</li>\n<li>datacenterId</li>\n<li>serviceClassId</li>\n<li>ownedBy</li>\n<li>createdTime</li>\n</ul>\nFor example, if you want to get a list of event broker services by name and time of creation, in ascending order, you would enter: <code>datacenterId,createdTime:asc</code>\n",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "pageNumber",
                  "in": "query",
                  "description": "The page number to retrieve.",
                  "required": false,
                  "schema": {
                     "minimum": 1,
                     "type": "integer",
                     "default": 1
                  }
               },
               {
                  "name": "pageSize",
                  "in": "query",
                  "description": "The number of event broker services to return per page.",
                  "required": false,
                  "schema": {
                     "maximum": 100,
                     "minimum": 1,
                     "type": "integer",
                     "default": 100
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServiceSummaryResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "post": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Create an event broker service",
            "description": "<p>Create an event broker service. You must provide a unique name and select a service class and datacenter. You can optionally define other properties for the event broker service.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `services:post` ]",
            "operationId": "createService",
            "requestBody": {
               "description": "The new service specification.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/CreateServiceRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An entity of type service was passed in an invalid format.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec",
                           "validationDetails": {
                              "serviceClassId": [
                                 "must not be blank"
                              ]
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{id}": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a specific event broker service by identifier",
            "description": "<p>Get the details of an event broker service using its identifier. Additional information about the event broker service can be requested using the 'expand' parameter.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` **or** `services:get:self` **or** `services:view` **or** `services:view:self` ]",
            "operationId": "getService",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "expand",
                  "in": "query",
                  "description": "You can request additional information about the event broker service by selecting expand parameters, including connection endpoint information, broker details including version, allowed actions you can perform on the service, and message spool details.",
                  "required": false,
                  "schema": {
                     "maxItems": 4,
                     "minItems": 0,
                     "uniqueItems": true,
                     "type": "array",
                     "items": {
                        "type": "string",
                        "enum": [
                           "broker",
                           "serviceConnectionEndpoints",
                           "allowedActions",
                           "messageSpoolDetails"
                        ]
                     }
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServiceResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the event broker service with id 4o5kyf4x5504.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "delete": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Delete an event broker service",
            "description": "<p>Delete a service using its unique identifier.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `services:delete` **or** `services:delete:self` **or** `mission_control:access` ]",
            "operationId": "deleteService",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "202": {
                  "description": "Operation accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the event broker service with id 4o5kyf4x5504.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "patch": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Update an event broker service",
            "description": "<p>Update the configuration of an existing event broker service. You can provide any combination of supported fields. If a field is not provided, then it will not be updated.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:put` ]",
            "operationId": "updateService",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The fields to update the configuration for the event broker service.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/UpdateServiceRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServiceResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "A JSON parse error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the event broker service with id 4o5kyf4x5504.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{id}/clone": {
         "post": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Create a clone of an existing event broker service",
            "description": "<p>Create a clone of an existing event broker service. </p><p>You must specify the unique identifiers of the event broker service in the URL and the datacenter in the request body. By default, the name of the new service is the name of the specified event broker service with  \" - Clone\" appended to the name. When the event broker service that you clone has deletion protection enabled ('locked' is ‘true’), the new event broker service also has deletion protection enabled. If service creation fails during the clone process, deletion protection is disabled ('locked' is 'false') and allows you to delete the failed service.</p><p>Cloning copies the Rest Delivery Endpoints, but disables them. You must re-enable the endpoints after creating the cloned service.</p><p>This endpoint does not clone: </p><ul><li>The custom hostname (or custom domain hostnames)</li><li>Bridge configuration </li><li>Event mesh configuration (Dynamic Message Routing (DMR) configuration)</li><li>Distributed tracing configuration</li><li>Event Broker Service Single Sign-on (SSO) configuration (OAuth profiles)</li><li>The router name for the event broker service</li><li>Server certificates</li></ul><p>Optionally, you can set the service connection endpoint settings as they are not cloned from the specified service.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `services:post` ]",
            "operationId": "cloneService",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the event broker service to clone.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The fields to specify to clone an event broker service.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/CloneServiceRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An entity of type service was passed in an invalid format.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec",
                           "validationDetails": {
                              "serviceClassId": [
                                 "must not be blank"
                              ]
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/messageSpool": {
         "patch": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Update the event broker service message spool size",
            "description": "<p>Expand the event broker service's message spool size.<p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:put` ]",
            "operationId": "updateMessageSpool",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The new size of the message spool in gigabytes (GB).",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/MessageSpool"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Service scale up failed due to insufficient message spool expansion limits.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find event broker service with id some_id.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/operations/{operationId}": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get the status of a service operation",
            "description": "<p>Get the status of an operation that being performed on an event broker service. To get the operation, you provide identifier of the operation and the identifier of the event broker service.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` **or** `services:get:self` **or** `services:view` **or** `services:view:self` ]",
            "operationId": "getServiceOperation",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "operationId",
                  "in": "path",
                  "description": "The identifier of the operation being performed on the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find the event broker service with id 4o5kyf4x5504.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/sempBasicAuth": {
         "put": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "(Beta) Update whether an event broker service allows basic authentication for management access",
            "description": "<p>Enable or disable basic authentication for management access to the event broker service.</p><p>Disabling basic authentication for management access to the event broker service disables access to users with the following roles:</p><ul>   <li>Administrator</li>   <li>Mission Control Manager</li>   <li>Mission Control Viewer</li>   <li>Mission Control User</li></ul><p>If you disable basic authentication, you must configure alternative access using LDAP or OAuth to provide management access to the event broker service. For more information, see <a href=https://docs.solace.com/Cloud/mission-control-rbac.htm>Configuring User Access to Event Broker Services</a> in the documentation.</p><p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:put` ]",
            "operationId": "disableOrEnable",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The object's attributes in JSON.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/BasicAuthAvailability"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "200": {
                  "description": "Returns the state of basic authentication on the event broker service, either:\n<ul>\n  <li><code>true</code> (authentication is enabled)</li>\n  <li><code>false</code> (authentication is disabled)</li>\n</ul>",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/BasicAuthAvailabilityResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {}
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/organizations/{orgId}/messageSpoolLimitUsage": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "(Beta) Get the organization message spool expansion information",
            "description": "Get the organization-wide message spool expansion class and limits information.",
            "operationId": "getLimits",
            "parameters": [
               {
                  "name": "orgId",
                  "in": "path",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/MessageSpoolLimitClassesResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad Request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     },
                     "*/*": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "forbidden"
               },
               "404": {
                  "description": "Entity Not Found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/serviceClasses": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a list of service classes",
            "description": "Get the service classes that are available in the account (or organization).<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `service_classes:get` ]",
            "operationId": "getServiceClasses",
            "parameters": [
               {
                  "name": "brokerFamilyVersion",
                  "in": "query",
                  "description": "The version of the broker family. For example 10.6",
                  "required": false,
                  "schema": {
                     "type": "number"
                  },
                  "example": 10.7
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServiceClassesResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {}
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {}
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/serviceClasses/{id}": {
         "get": {
            "tags": [
               "Event Broker Services"
            ],
            "summary": "Get a specific service class by identifier",
            "description": "Get the details of a service class using its identifier.<br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `service_classes:get` ]",
            "operationId": "getServiceClass",
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "The unique identifier of the service class.",
                  "required": true,
                  "schema": {
                     "type": "string",
                     "enum": [
                        "DEVELOPER",
                        "ENTERPRISE_250_STANDALONE",
                        "ENTERPRISE_1K_STANDALONE",
                        "ENTERPRISE_5K_STANDALONE",
                        "ENTERPRISE_10K_STANDALONE",
                        "ENTERPRISE_50K_STANDALONE",
                        "ENTERPRISE_100K_STANDALONE",
                        "ENTERPRISE_250_HIGHAVAILABILITY",
                        "ENTERPRISE_1K_HIGHAVAILABILITY",
                        "ENTERPRISE_5K_HIGHAVAILABILITY",
                        "ENTERPRISE_10K_HIGHAVAILABILITY",
                        "ENTERPRISE_50K_HIGHAVAILABILITY",
                        "ENTERPRISE_100K_HIGHAVAILABILITY"
                     ]
                  }
               },
               {
                  "name": "brokerFamilyVersion",
                  "in": "query",
                  "description": "The version of the broker family. For example 10.6",
                  "required": false,
                  "schema": {
                     "type": "number"
                  },
                  "example": 10.7
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServiceClassResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Invalid Parameter.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Invalid parameter: id. Must be one of the following types: DEVELOPER,ENTERPRISE_250_HIGHAVAILABILITY,ENTERPRISE_1K_HIGHAVAILABILITY,ENTERPRISE_5K_HIGHAVAILABILITY,ENTERPRISE_10K_HIGHAVAILABILITY,ENTERPRISE_50K_HIGHAVAILABILITY,ENTERPRISE_100K_HIGHAVAILABILITY,ENTERPRISE_250_STANDALONE,ENTERPRISE_1K_STANDALONE,ENTERPRISE_5K_STANDALONE,ENTERPRISE_10K_STANDALONE,ENTERPRISE_50K_STANDALONE,ENTERPRISE_100K_STANDALONE",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Entity Not Found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        }
                     }
                  }
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/serverCertificates": {
         "get": {
            "tags": [
               "Server Certificates"
            ],
            "summary": "(Beta) Get all server certificates",
            "description": "<p>Get all server certificates for the event broker service.<p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` ]",
            "operationId": "getAllServerCertificates",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServerCertificateSummaryResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Bad request.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find resource with id some_id.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "post": {
            "tags": [
               "Server Certificates"
            ],
            "summary": "(Beta) Initiate an upload of a server certificate",
            "description": "<p>Upload a server certificate for the event broker service.<p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `services:post` **or** `mission_control:access` ]",
            "operationId": "uploadServerCertificate",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The request to upload a server certificate.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/UploadCertificateRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Bad request.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find resource with id some_id.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/serverCertificates/{certificateId}": {
         "get": {
            "tags": [
               "Server Certificates"
            ],
            "summary": "(Beta) Get a server certificate by its ID",
            "description": "<p>Get a server certificate by its ID for the event broker service.<p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:get` ]",
            "operationId": "getServerCertificateById",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "certificateId",
                  "in": "path",
                  "description": "The unique identifier of the server certificate.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "OK.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ServerCertificateResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Bad request.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find resource with id some_id.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         },
         "delete": {
            "tags": [
               "Server Certificates"
            ],
            "summary": "(Beta) Delete a server certificate by its ID",
            "description": "<p>Delete a server certificate by its ID for the event broker service.<p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `mission_control:access` **or** `services:delete` ]",
            "operationId": "deleteServerCertificateById",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "certificateId",
                  "in": "path",
                  "description": "The unique identifier of the server certificate.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Bad request.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find resource with id some_id.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      },
      "/api/v2/missionControl/eventBrokerServices/{serviceId}/serverCertificates/{certificateId}/install": {
         "post": {
            "tags": [
               "Server Certificates"
            ],
            "summary": "(Beta) Initiate installation of a server certificate by its ID",
            "description": "<p>Install a server certificate by its ID for the event broker service.<p>Your token must have one of the permissions listed in the Token Permissions.</p><br><br><a href=\"https://api.solace.dev/cloud/reference/authentication\">Token Permissions</a>: [ `services:post` **or** `mission_control:access` ]",
            "operationId": "installServerCertificate",
            "parameters": [
               {
                  "name": "serviceId",
                  "in": "path",
                  "description": "The unique identifier of the event broker service.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "certificateId",
                  "in": "path",
                  "description": "The unique identifier of the server certificate.",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "description": "The request to install a server certificate.",
               "content": {
                  "application/json": {
                     "schema": {
                        "$ref": "#/components/schemas/InstallCertificateRequest"
                     }
                  }
               },
               "required": true
            },
            "responses": {
               "202": {
                  "description": "Accepted.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/OperationResponse"
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Bad request.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "An authentication error occurred.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "403": {
                  "description": "Forbidden.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "You do not have permissions to perform this operation.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "404": {
                  "description": "Not found.",
                  "content": {
                     "application/json": {
                        "schema": {
                           "$ref": "#/components/schemas/ErrorResponse"
                        },
                        "example": {
                           "message": "Could not find resource with id some_id.",
                           "errorId": "618e2fb0-a198-4d9d-9219-13e51ef0ecec"
                        }
                     }
                  }
               },
               "503": {
                  "description": "Service unavailable.",
                  "content": {}
               }
            },
            "security": [
               {
                  "bearerAuth": []
               }
            ]
         }
      }
   },
   "components": {
      "schemas": {
         "ErrorResponse": {
            "type": "object",
            "properties": {
               "message": {
                  "type": "string",
                  "description": "A user-friendly message that describes the error.",
                  "example": "An error occurred."
               },
               "errorId": {
                  "type": "string",
                  "description": "The UUID (Universally Unique Identifier) that is logged with an appropriate stack trace for a WARN or ERROR log that allows support to better determine what cause the error.",
                  "example": "123e4567-e89b-12d3-a456-426655440000"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object",
                     "example": "'object': { 'field': 'description' }"
                  },
                  "example": "'object': { 'field': 'description' }"
               },
               "validationDetails": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "array",
                     "description": "When applicable, these are the details of issues with the fields provided for the REST call.",
                     "example": "'name': ['Not unique']",
                     "items": {
                        "type": "string",
                        "description": "When applicable, these are the details of issues with the fields provided for the REST call.",
                        "example": "'name': ['Not unique']"
                     }
                  },
                  "description": "When applicable, these are the details of issues with the fields provided for the REST call.",
                  "example": "'name': ['Not unique']"
               }
            }
         },
         "BasicAuthAvailability": {
            "required": [
               "enabled"
            ],
            "type": "object",
            "properties": {
               "enabled": {
                  "type": "boolean",
                  "description": "Select a value in the field to indicate whether basic authentication should be enabled or disabled for the event broker service. The valid values are:\n<ul>\n  <li><code>true</code>-enables basic authentication</li>\n  <li><code>false</code>-disables basic authentication</li>\n</ul>",
                  "example": false,
                  "default": true
               }
            }
         },
         "BasicAuthAvailabilityResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/BasicAuthAvailability"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "ClientProfileRequest": {
            "type": "object",
            "properties": {
               "name": {
                  "maxLength": 32,
                  "minLength": 1,
                  "pattern": "[a-zA-Z0-9-_]*",
                  "type": "string"
               },
               "allowGuaranteedMsgSendEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to publish guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed) . The default is 'false'."
               },
               "allowGuaranteedMsgReceiveEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to bind to topic endpoints or queues to receive guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed). The default is 'false'."
               },
               "compressionEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to transfer data using compression. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'true'."
               },
               "replicationAllowClientConnectWhenStandbyEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to remain connected to the Message VPN when its replication state is Standby. This situation may occur when the Message VPN Replication state of the event broker service changes from Active to Standby. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowTransactedSessionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether client applications client applications assigned to the client profile are allowed to establish transacted sessions or XA sessions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowBridgeConnectionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to establish Dynamic Messaging Routing (DMR) links (or bridge links) from the current Message VPN to another Message VPN in a separate event broker service. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowGuaranteedEndpointCreateEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to create queues or topic endpoints. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowSharedSubscriptionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to use shared subscriptions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "apiQueueManagementCopyFromOnCreateName": {
                  "maxLength": 200,
                  "minLength": 0,
                  "type": "string",
                  "description": "<p><em>Removal Date: 2024-05-26</em></p><p><em>Reason: Replaced by apiQueueManagementCopyFromOnCreateTemplateName</em></p>The name of a queue template to copy settings from when a new queue is <p>created by the client using the client profile. If the specified queue template does not exist, creation fails. Deprecated since 2.14. This attribute has been replaced with apiQueueManagementCopyFromOnCreateTemplateName.</p>",
                  "deprecated": true
               },
               "apiQueueManagementCopyFromOnCreateTemplateName": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string",
                  "description": "The name of a queue template to copy settings from when a new queue is created by the client using the client profile. If the specified queue template does not exist, creation fails. "
               },
               "apiTopicEndpointManagementCopyFromOnCreateName": {
                  "maxLength": 200,
                  "minLength": 0,
                  "type": "string",
                  "description": "<p><em>Removal Date: 2024-05-26</em></p><p><em>Reason: Replaced by apiTopicEndpointManagementCopyFromOnCreateTemplateName</em></p><p>The name of a topic endpoint to copy settings from when a new topic endpoint is created by the client using the client profile. If the specified topic endpoint does not exist, creation fails. Deprecated since 2.14. This attribute has been replaced with apiTopicEndpointManagementCopyFromOnCreateTemplateName.</p>",
                  "deprecated": true
               },
               "apiTopicEndpointManagementCopyFromOnCreateTemplateName": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string",
                  "description": "The name of a topic endpoint to copy settings from when a new topic endpoint is created by the client using the client profile. If the specified topic endpoint does not exist, creation fails."
               },
               "serviceMinKeepaliveTimeout": {
                  "type": "integer",
                  "description": "The minimum period of time (in seconds) that the event broker service will tolerate inactivity on the client connection. This keepalive value is also enforced for MQTT and SMF (Solace Message Format) connections. The keepalive timeout value is calculated based on the client provided timeout interval (3 x the keepalive interval for SMF, 1.5 x the keepalive interval for MQTT). The default is 30 and valid ranges are 3–3600.",
                  "format": "int32"
               },
               "serviceSmfMinKeepaliveEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients using the client profile have the minimum keep-alive timeout enabled for SMF (Solace Message Format) connections. The valid values are 'true' (enabled) and 'false' (not enabled). The default is 'false'."
               },
               "serviceWebInactiveTimeout": {
                  "type": "integer",
                  "description": "The number of seconds a Web client has to send a request before its session times out and be terminated for being inactive. The default value is 30 seconds.",
                  "format": "int32"
               },
               "serviceWebMaxPayload": {
                  "type": "integer",
                  "description": "The maximum transport payload size (in bytes) before fragmentation occurs for clients using the client profile. The size of the header is not included.\n\nSolace Message Format (SMF) messages that are sent to a consuming Web client are contained within a Web transport message that the event broker sends in its HTTP response to that client. Each Web transport message that is sent can contain multiple SMF messages or partial SMF messages.\nThe maximum Web payload value sets the maximum number of bytes allowed in a single Web transport message (not including the header). This value determines the number of SMF messages that can be sent in a single HTTP response and the size of the Web transport message sent in the HTTP response. The value range is 300 to 10000000, in bytes. The default is 1000000 bytes.\n\nSMF messages that are sent to a consuming Web client are contained within a Web transport message that the event broker sends in its HTTP response to that client. Each Web transport message that is sent can contain multiple SMF messages or partial SMF messages.\n\nThe maximum Web payload value sets the maximum number of bytes allowed in a single Web transport message (not including the header). This value determines the number of SMF messages that can be sent in a single HTTP response and the size of the Web transport message sent in the HTTP response. Note that large SMF messages can be fragmented across Web transport messages to respect the value set for the maximum possible Web payload.",
                  "format": "int32"
               },
               "maxConnectionCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum permitted number of simultaneous Web transport client connections to the event broker service that can be made using the same client username account. The default is the maximum value supported by the platform.",
                  "format": "int32"
               },
               "serviceSmfMaxConnectionCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum permitted number of simultaneous Solace Message Format (SMF) client connections to the event broker that can be made using the same client username account. The default is the maximum value supported by the platform.",
                  "format": "int32"
               },
               "serviceWebMaxConnectionCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum permitted number of simultaneous Web transport client connections to the event broker service that can be made using the same client username account. The default is the maximum value supported by the platform.",
                  "format": "int32"
               },
               "maxEndpointCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum number of durable and non-durable queues and topic endpoints that can be owned by the clients using the same client username within a client profile. The default is 1000.",
                  "format": "int32"
               },
               "maxEgressFlowCount": {
                  "type": "integer",
                  "description": "The maximum number of egress flows (that is, Guaranteed Message client receive flows or consumer flows) that can be created by a single client associated with this client profile. The default is 1000.",
                  "format": "int32"
               },
               "maxIngressFlowCount": {
                  "type": "integer",
                  "description": "The maximum number of ingress flows (that is, Guaranteed Message client publish flows) that can be created by a single client associated with this client profile. The default is 1000.",
                  "format": "int32"
               },
               "maxSubscriptionCount": {
                  "type": "integer",
                  "description": "The maximum number of subscriptions for a single client in the client profile. When you set this option, consider the total maximum number of permitted topic subscriptions and the total maximum number of client connections for the type of event broker that is used. That is, to ensure reliable system performance, you must find the right balance for your network, while staying within the system limits mentioned. The balance is generally between allowing the creation of many client applications and allowing each client to add a large number of topic subscriptions. The default varies by platform.",
                  "format": "int32"
               },
               "maxTransactedSessionCount": {
                  "type": "integer",
                  "description": "The maximum number of simultaneous transacted sessions and/or XA sessions allowed for a single client associated with the client profile. The default is 10.",
                  "format": "int32"
               },
               "maxTransactionCount": {
                  "type": "integer",
                  "description": "The total maximum number of simultaneous transactions (both local transactions and transactions within the XA transaction branches) allowed for a single client associated with the client profile. The default varies by platform.",
                  "format": "int32"
               },
               "queueGuaranteed1MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Guaranteed Messages that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueGuaranteed1MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Guaranteed Message queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 255. The value of 255 is recommended for memory usage optimized configurations, such as message applications; a value of 66000 is for WAN optimized configurations.",
                  "format": "int32"
               },
               "queueDirect1MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Direct Messages 1 [Class of Service (COS) 1] that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueDirect1MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 1 (COS 1) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "queueDirect2MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Direct Messages 2 (COS 2) that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueDirect2MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 2 (COS 2) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "queueDirect3MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Direct Messages 3 [Class of Service (COS) 3] that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueDirect3MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 3 (COS 3) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "queueControl1MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Control 1 that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueControl1MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 1 (COS 1) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "tcpCongestionWindowSize": {
                  "type": "integer",
                  "description": "The TCP initial congestion window size is the number of segments that TCP sends before waiting for an acknowledgment from the peer. The TCP initial congestion window size is used when starting up a TCP connection or on recovery from idle (that is, no traffic). Larger values of the initial window allows a connection to come up to speed more quickly. For further details, refer to RFC 2581.\nChanging the TCP initial congestion window size from its default of 2 results in non-compliance with RFC 2581. Further, if this setting is set to a value too high, it may cause congestion in the network. Contact support before you attempt to change this TCP parameter.",
                  "format": "int32"
               },
               "tcpKeepaliveCount": {
                  "type": "integer",
                  "description": "The maximum number of keepalive probes (from 2 to 5 ) that TCP should send before dropping the connection. The default is 5.",
                  "format": "int32"
               },
               "tcpKeepaliveIdleTime": {
                  "type": "integer",
                  "description": "The time (from 3 to 120 seconds) a connection must remain idle before TCP begins sending keepalive probes. The default is 3.",
                  "format": "int32"
               },
               "tcpKeepaliveInterval": {
                  "type": "integer",
                  "description": "The time (from 1 to 30 seconds) to set as the interval between individual keepalive probes. The default is 1.",
                  "format": "int32"
               },
               "tcpMaxSegmentSize": {
                  "type": "integer",
                  "description": "The TCP maximum segment size (MSS) used for client to the event broker service. The default is 1460.",
                  "format": "int32"
               },
               "tcpMaxWindowSize": {
                  "type": "integer",
                  "description": "The TCP window size between the event broker service and the client.\nIf the maximum window size is set to less than the bandwidth-delay product, then the TCP connection operates below its maximum potential throughput. If the maximum window is set to less than about twice the bandwidth-delay product, then occasional packet loss causes the TCP connection to operate below its maximum potential throughput as it handles the missing acknowledgments and retransmissions. The default is 256.\n\nAlternately, if the TCP maximum window size is set too large, in the presence of a high offered load, TCP gradually increases its congestion window size until either the congestion window size reaches the maximum window size, or packet loss occurs in the network.\n\nInitially, when the TCP congestion window size is small, the physical bandwidth-delay of the network acts as a memory buffer for packets in flight. But as the congestion window crosses the bandwidth-delay product, the buffering of in-flight packets moves to queues in event broker services and other equipment throughout the network. As the TCP congestion window continues to increase in size, these various equipment queues overflow, causing packet loss and TCP backoff.",
                  "format": "int32"
               },
               "elidingDelay": {
                  "type": "integer",
                  "description": "The amount of time to delay the delivery of messages to a client after the initial message has been delivered. You can specify a value from 0-6000 milliseconds. The default is 0.",
                  "format": "int32"
               },
               "elidingEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to use eliding. Eliding allows clients to define a custom per-topic rate for client applications so they can effectively consume relevant messages, rather than queuing up outdated messages. For example, when eliding is configured, clients could receive direct messages for their topic subscriptions at a rate of at most five per second, per topic–even though the source is publishing updates at a much higher rate. The valid values are 'true' (enabled) and 'false' (not enabled). The default is 'false'."
               },
               "elidingMaxTopicCount": {
                  "type": "integer",
                  "description": "The maximum number of topics the event broker service that can track for performing the eliding function on each client connection. You can specify a value from 1-320000. The default is 256.",
                  "format": "int32"
               },
               "rejectMsgToSenderOnNoSubscriptionMatchEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned the client profile are allowed to return NACKs (negative acknowledgements) for guaranteed messages that do not have a that do not have a matching guaranteed message subscription. The value values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "tlsAllowDowngradeToPlainTextEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned the client profile are allowed to use TLS/SSL encryption to protect the clients' credentials. This setting doesn't encrypt the data that is transmitted after the clients are authenticated and authorized. This also allows connecting client applications to request to downgrade of their TLS/SSL connections to the Message VPN to a plain-text connection, and if that Message VPN allows TLS/SSL connection downgrades, after the clientsʼ login handshake are finished, their connections are downgraded. This means that the clientsʼ authentication data is still encrypted, but the subsequent application data that is transmitted is sent as non-encrypted plain-text. The valid values are 'true (allowed) or 'false (not allowed). The default is 'true'."
               },
               "eventClientProvisionedEndpointSpoolUsageThreshold": {
                  "$ref": "#/components/schemas/ProvisionedEndpointSpoolUsageAlertThresholds"
               },
               "id": {
                  "type": "string"
               },
               "type": {
                  "type": "string"
               }
            },
            "description": "The client profile configured on the event broker service."
         },
         "ProvisionedEndpointSpoolUsageAlertThresholds": {
            "type": "object",
            "properties": {
               "setPercent": {
                  "type": "integer",
                  "description": "The clear threshold value for the message spool usage (as a percentage).",
                  "format": "int32"
               },
               "clearPercent": {
                  "type": "integer",
                  "description": "The raise threshold value for the message spool usage (as a percentage).",
                  "format": "int32"
               }
            },
            "description": "The clear ('clearPercent') and raise ('setPercent') threshold values that determine when to generate events for the percentage amount of the message spool used by all endpoints provisioned by clients for the given client profile."
         },
         "Error": {
            "type": "object",
            "properties": {
               "message": {
                  "type": "string",
                  "description": "A user-friendly message describing the reason for the error or what went wrong."
               },
               "errorId": {
                  "type": "string",
                  "description": "A universally unique identifier (UUID) is useful for debugging. You can provide this code as part of the information you send to our support team."
               }
            }
         },
         "Operation": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "Operations requiring time to complete provide an operation identifier so you can query their progress."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes.",
                  "readOnly": true,
                  "example": "operation"
               },
               "operationType": {
                  "type": "string",
                  "description": "The type of operation against the resource.",
                  "enum": [
                     "createService",
                     "cloneService",
                     "deleteService",
                     "createClientProfile",
                     "updateClientProfile",
                     "deleteClientProfile",
                     "serviceRequest",
                     "infrastructureRequest",
                     "datacenterRequest",
                     "uploadCertificate",
                     "installCertificate",
                     "deleteCertificate"
                  ]
               },
               "createdBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who created the operation."
               },
               "createdTime": {
                  "type": "string",
                  "description": "The time the operation was created, in ISO 8601 date/time format.",
                  "example": "2022-03-14T15:01:34.000Z"
               },
               "completedTime": {
                  "type": "string",
                  "description": "The completion time, whether it was successful or failed, in ISO 8601 date/time format.",
                  "example": "2022-03-14T15:01:34.000Z"
               },
               "resourceId": {
                  "type": "string",
                  "description": "The resource ID that the operation belongs to.",
                  "readOnly": true,
                  "example": "abcd1234"
               },
               "resourceType": {
                  "type": "string",
                  "description": "The resource type that the operation belongs to.",
                  "readOnly": true,
                  "example": "service"
               },
               "status": {
                  "type": "string",
                  "description": "The status of the operation.",
                  "readOnly": true,
                  "example": "PENDING",
                  "enum": [
                     "PENDING",
                     "INPROGRESS",
                     "SUCCEEDED",
                     "FAILED"
                  ]
               },
               "error": {
                  "$ref": "#/components/schemas/Error"
               }
            }
         },
         "OperationResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/Operation"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "BrokerSempProxyError": {
            "type": "object",
            "properties": {
               "meta": {
                  "$ref": "#/components/schemas/BrokerSempProxyErrorMeta"
               }
            },
            "description": "The error response of the broker SEMP proxy request."
         },
         "BrokerSempProxyErrorMeta": {
            "type": "object",
            "properties": {
               "error": {
                  "$ref": "#/components/schemas/SempError"
               },
               "request": {
                  "$ref": "#/components/schemas/SempRequest"
               },
               "responseCode": {
                  "type": "integer",
                  "format": "int32"
               }
            },
            "description": "The metadata of the broker SEMP proxy request error."
         },
         "SempError": {
            "type": "object",
            "properties": {
               "code": {
                  "type": "string"
               },
               "description": {
                  "type": "string"
               },
               "status": {
                  "type": "string"
               }
            }
         },
         "SempRequest": {
            "type": "object",
            "properties": {
               "method": {
                  "type": "string"
               },
               "uri": {
                  "type": "string"
               }
            }
         },
         "ConnectionEndpoint": {
            "required": [
               "accessType",
               "name",
               "ports"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The identifier of the connection endpoint.",
                  "readOnly": true
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes.",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "description": "The name of the connection endpoint.",
                  "example": "Public Endpoint"
               },
               "description": {
                  "type": "string",
                  "description": "The description for the connection endpoint."
               },
               "accessType": {
                  "type": "string",
                  "description": "The connectivity for the connection endpoint. This can be through private IP addresses (PRIVATE) or public Internet (PUBLIC).",
                  "example": "PUBLIC",
                  "enum": [
                     "PUBLIC",
                     "PRIVATE"
                  ]
               },
               "k8sServiceType": {
                  "type": "string",
                  "description": "The connectivity configuration that is used in the Kubernetes cluster.",
                  "enum": [
                     "NODEPORT",
                     "LOADBALANCER",
                     "CLUSTERIP"
                  ]
               },
               "k8sServiceId": {
                  "type": "string",
                  "description": "The identifier for the Kubernetes service.",
                  "readOnly": true
               },
               "hostNames": {
                  "type": "array",
                  "description": "The hostnames assigned to the connection endpoint.",
                  "readOnly": true,
                  "items": {
                     "type": "string",
                     "description": "The hostnames assigned to the connection endpoint.",
                     "readOnly": true
                  }
               },
               "ports": {
                  "type": "array",
                  "description": "<p>The protocols and port numbers of the connection endpoint. All messaging and management protocols along with the port numbers must be specified in the request.</p>\n<p>Connection specific protocols. </p>\n<ul>\n<li><b>Solace Messaging</b> </li>\n<ul>\n<li>'serviceSmfPlainTextListenPort'-Use SMF Host (plain-text) over TCP to connect and exchange messages with the event broker service.</li>\n<li>'serviceSmfCompressedListenPort'-Use SMF (plain-text) in a compressed format over TCP to connect and exchange messages with the event broker service.</li>\n<li>'serviceSmfTlsListenPort'-Use secure SMF using TLS over TCP.</li>\n</ul>\n<br>\n<li><b>Solace Web Messaging</b></li>\n<ul>\n<li>'serviceWebPlainTextListenPort'-Use WebSocket over HTTP (plain-text).</li>\n<li>'serviceWebTlsListenPort'-Use WebSocket over secured HTTP.</li>\n</ul>\n<br>\n<li><b>AMQP</b></li>\n<ul>\n<li>'serviceAmqpPlainTextListenPort'-Use AMQP (plain-text).</li>\n<li>'serviceAmqpTlsListenPort'-Use AMQP over a secure TCP connection.</li>\n</ul>\n<br>\n<li><b>MQTT</b></li>\n<ul>\n<li>'serviceMqttPlainTextListenPort'-Use MQTT (plain-text).</li>\n<li>'serviceMqttWebSocketListenPort'-Use MQTT WebSocket (plain-text).</li>\n<li>'serviceMqttTlsListenPort'-Use secure MQTT.</li>\n<li>'serviceMqttTlsWebSocketListenPort'-Use WebSocket secured MQTT.</li>\n</ul>\n<br>\n<li><b>REST</b></li>\n<ul>\n<li>'serviceRestIncomingPlainTextListenPort'-Use REST messaging (plain-text).</li>\n<li>'serviceRestIncomingTlsListenPort'-Use secure REST messaging.</li>\n</ul>\n<br>\n<li><b>Management</b></li>\n<ul>\n<li>'serviceManagementTlsListenPort'-Use the secured management connection, which uses SEMP to manage the event broker. This port must be enabled on at least one of the service connection endpoints on the event broker service.</li>\n<li>'managementSshTlsListenPort'-Use a secure port to connect to the event broker service to issue Solace Command Line Interface (CLI). This port provides you with scope-restricted access to the event broker service.</li>\n</ul>\n<ul>",
                  "items": {
                     "$ref": "#/components/schemas/ServiceConnectionEndpointPort"
                  }
               }
            },
            "description": "The connection endpoint."
         },
         "CreateServiceRequest": {
            "required": [
               "datacenterId",
               "name",
               "serviceClassId"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The unique identifier of the create service request.",
                  "readOnly": true
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes.",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "description": "The event broker service name.",
                  "example": "my-service-name"
               },
               "eventBrokerVersion": {
                  "pattern": "^([0-9]+)\\.([0-9]+)(\\.([0-9]+)\\.([0-9]+)-([0-9]+))?$",
                  "type": "string",
                  "description": "The event broker version. A default version is provided when this is not specified.",
                  "example": "10.0.1.62-0"
               },
               "msgVpnName": {
                  "type": "string",
                  "description": "The message VPN name. A default message VPN name is provided when this is not specified.",
                  "example": "MyVPN"
               },
               "maxSpoolUsage": {
                  "maximum": 6000,
                  "minimum": 10,
                  "type": "integer",
                  "description": "The message spool size, in gigabytes (GB). A default message spool size is provided if this is not specified.",
                  "format": "int32",
                  "example": 50
               },
               "serviceClassId": {
                  "$ref": "#/components/schemas/ServiceClassId"
               },
               "datacenterId": {
                  "type": "string",
                  "description": "The identifier of the datacenter.",
                  "example": "k8s-us-east-1"
               },
               "clusterName": {
                  "type": "string",
                  "description": "The name of the DMR cluster.",
                  "example": "MyCluster"
               },
               "locked": {
                  "type": "boolean",
                  "description": "Indicates if you can delete the event broker service after creating it.  The default value is false, and the valid values are:  <p><ul><li>'true' - you cannot delete this service</li><li>'false' - you can delete this service</li></ul></p>",
                  "example": true,
                  "default": false
               },
               "redundancyGroupSslEnabled": {
                  "type": "boolean",
                  "description": "Enable or disable SSL for the redundancy group (for mate-link encryption).  The default value is false and the valid values are: <p><ul><li>'true' - enabled</li><li>'false' - disabled</li></ul></p>",
                  "example": true,
                  "default": false
               },
               "serviceConnectionEndpoints": {
                  "type": "array",
                  "description": "The collection of service connection endpoints. If you do not provide parameters for the service connection endpoint, a private endpoint (for Dedicated Regions and Customer-Controlled Regions) or a public endpoint (for Public Regions) is created.",
                  "items": {
                     "$ref": "#/components/schemas/ConnectionEndpoint"
                  }
               },
               "customRouterName": {
                  "maxLength": 12,
                  "minLength": 3,
                  "pattern": "^[a-z0-9]*$",
                  "type": "string",
                  "description": "<p>The unique prefix for the name of the router for the event broker service. The prefix must be constructed using only lower-case, alphanumeric characters.</p><p>When the customRouterName value is defined, it’s value is added as a prefix to the high-availability role (\"primary\", \"backup\", or \"monitoring\"), and \"cn\" (custom name) is appended to the end to create the custom router name. For example, if you specified a value of \"custom\", the router name is \"customprimarycn\".</p><p> If the customRouterName value is left blank, the prefix defaults to the service id of the event broker service. This is prefixed to the event broker service node role to create the router name, for example, \"bd37t1d5h4kprimary\".<p><p><b>Note:</b> customRouterName is only supported on event broker versions 10.4 or later.</p>",
                  "example": "abc123"
               },
               "environmentId": {
                  "type": "string",
                  "description": "The unique identifier of the environment where you want to create the service.\n\nYou can only specify an environment identifier when creating services in a Public Region. You cannot specify an environment identifier when creating a service in a Dedicated Region.\n\nCreating a service in a Public Region without specifying an environment identifier places it in the default environment.\n"
               }
            }
         },
         "ServiceClassId": {
            "type": "string",
            "description": "Supported service classes.",
            "example": "[\"DEVELOPER\",\"ENTERPRISE_1K_HIGHAVAILABILITY\",\"ENTERPRISE_1K_STANDALONE\"]",
            "enum": [
               "DEVELOPER",
               "ENTERPRISE_250_STANDALONE",
               "ENTERPRISE_1K_STANDALONE",
               "ENTERPRISE_5K_STANDALONE",
               "ENTERPRISE_10K_STANDALONE",
               "ENTERPRISE_50K_STANDALONE",
               "ENTERPRISE_100K_STANDALONE",
               "ENTERPRISE_250_HIGHAVAILABILITY",
               "ENTERPRISE_1K_HIGHAVAILABILITY",
               "ENTERPRISE_5K_HIGHAVAILABILITY",
               "ENTERPRISE_10K_HIGHAVAILABILITY",
               "ENTERPRISE_50K_HIGHAVAILABILITY",
               "ENTERPRISE_100K_HIGHAVAILABILITY"
            ]
         },
         "ServiceConnectionEndpointPort": {
            "required": [
               "protocol"
            ],
            "type": "object",
            "properties": {
               "protocol": {
                  "type": "string",
                  "description": "Messaging or management protocol.",
                  "enum": [
                     "serviceSmfPlainTextListenPort",
                     "serviceSmfCompressedListenPort",
                     "serviceSmfTlsListenPort",
                     "serviceWebPlainTextListenPort",
                     "serviceWebTlsListenPort",
                     "serviceAmqpPlainTextListenPort",
                     "serviceAmqpTlsListenPort",
                     "serviceMqttPlainTextListenPort",
                     "serviceMqttWebSocketListenPort",
                     "serviceMqttTlsListenPort",
                     "serviceMqttTlsWebSocketListenPort",
                     "serviceRestIncomingPlainTextListenPort",
                     "serviceRestIncomingTlsListenPort",
                     "serviceManagementTlsListenPort",
                     "managementSshTlsListenPort"
                  ]
               },
               "port": {
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer",
                  "description": "Port number. Use '0' to disable the port.",
                  "format": "int32"
               }
            },
            "description": "<p>The protocols and port numbers of the connection endpoint. All messaging and management protocols along with the port numbers must be specified in the request.</p>\n<p>Connection specific protocols. </p>\n<ul>\n<li><b>Solace Messaging</b> </li>\n<ul>\n<li>'serviceSmfPlainTextListenPort'-Use SMF Host (plain-text) over TCP to connect and exchange messages with the event broker service.</li>\n<li>'serviceSmfCompressedListenPort'-Use SMF (plain-text) in a compressed format over TCP to connect and exchange messages with the event broker service.</li>\n<li>'serviceSmfTlsListenPort'-Use secure SMF using TLS over TCP.</li>\n</ul>\n<br>\n<li><b>Solace Web Messaging</b></li>\n<ul>\n<li>'serviceWebPlainTextListenPort'-Use WebSocket over HTTP (plain-text).</li>\n<li>'serviceWebTlsListenPort'-Use WebSocket over secured HTTP.</li>\n</ul>\n<br>\n<li><b>AMQP</b></li>\n<ul>\n<li>'serviceAmqpPlainTextListenPort'-Use AMQP (plain-text).</li>\n<li>'serviceAmqpTlsListenPort'-Use AMQP over a secure TCP connection.</li>\n</ul>\n<br>\n<li><b>MQTT</b></li>\n<ul>\n<li>'serviceMqttPlainTextListenPort'-Use MQTT (plain-text).</li>\n<li>'serviceMqttWebSocketListenPort'-Use MQTT WebSocket (plain-text).</li>\n<li>'serviceMqttTlsListenPort'-Use secure MQTT.</li>\n<li>'serviceMqttTlsWebSocketListenPort'-Use WebSocket secured MQTT.</li>\n</ul>\n<br>\n<li><b>REST</b></li>\n<ul>\n<li>'serviceRestIncomingPlainTextListenPort'-Use REST messaging (plain-text).</li>\n<li>'serviceRestIncomingTlsListenPort'-Use secure REST messaging.</li>\n</ul>\n<br>\n<li><b>Management</b></li>\n<ul>\n<li>'serviceManagementTlsListenPort'-Use the secured management connection, which uses SEMP to manage the event broker. This port must be enabled on at least one of the service connection endpoints on the event broker service.</li>\n<li>'managementSshTlsListenPort'-Use a secure port to connect to the event broker service to issue Solace Command Line Interface (CLI). This port provides you with scope-restricted access to the event broker service.</li>\n</ul>\n<ul>"
         },
         "UploadCertificateRequest": {
            "required": [
               "certificate",
               "privateKey"
            ],
            "type": "object",
            "properties": {
               "certificate": {
                  "type": "string"
               },
               "privateKey": {
                  "type": "string"
               }
            }
         },
         "InstallCertificateRequest": {
            "type": "object",
            "properties": {
               "passphrase": {
                  "type": "string"
               }
            }
         },
         "CloneServiceRequest": {
            "required": [
               "datacenterId"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The unique identifier of the clone service request.",
                  "readOnly": true
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes.",
                  "readOnly": true
               },
               "name": {
                  "type": "string",
                  "description": "The event broker service name.",
                  "example": "my-service-name"
               },
               "datacenterId": {
                  "type": "string",
                  "description": "The identifier of the datacenter.",
                  "example": "k8s-us-east-1"
               },
               "serviceConnectionEndpoints": {
                  "type": "array",
                  "description": "The collection of service connection endpoints.",
                  "items": {
                     "$ref": "#/components/schemas/ConnectionEndpoint"
                  }
               },
               "serviceCloneAttributes": {
                  "$ref": "#/components/schemas/ServiceCloneAttributes"
               },
               "customRouterName": {
                  "maxLength": 12,
                  "minLength": 3,
                  "pattern": "^[a-z0-9]*$",
                  "type": "string",
                  "description": "<p>The unique prefix for the name of the router for the event broker service. The prefix must be constructed using only lower-case, alphanumeric characters.</p><p>When the customRouterName value is defined, it is added as a prefix to the event broker service node role, and \"cn\" (custom name) is appended to the end to create the custom router name, for example, \"customprimarycn\".</p><p> If the customRouterName value is left blank, the prefix defaults to the service id of the event broker service. This is prefixed to the event broker service node role to create the router name, for example, \"bd37t1d5h4kprimary\".<p><p><b>Note:</b> customRouterName is only supported on event broker versions 10.4 or greater.</p>",
                  "example": "abc123"
               },
               "environmentId": {
                  "type": "string",
                  "description": "The unique identifier of the environment where you want to create the service.\n\nYou can only specify an environment identifier when creating services in a Public Region. You cannot specify an environment identifier when creating a service in a Dedicated Region.\n\nCreating a service in a Public Region without specifying an environment identifier places it in the default environment.\n"
               }
            }
         },
         "ServiceCloneAttributes": {
            "type": "object",
            "properties": {
               "components": {
                  "type": "array",
                  "items": {
                     "type": "string",
                     "enum": [
                        "SERVICE_CONFIGURATION",
                        "BROKER_CONFIGURATION",
                        "CERTIFICATE_AUTHORITIES"
                     ]
                  }
               }
            },
            "description": "<p>The event broker service settings that you can specify to clone. The cluster name, client authentication (client user names), and management users are always cloned to the new service.  You can specify one or more of  the following attributes to clone to the new event broker service:</p>\n<ul>\n<li>'SERVICE_CONFIGURATION'-The LDAP authentication profiles, LDAP management, SEMP over message bus enabled setting, and SYSLOG configuration settings.</li>\n<li>'BROKER_CONFIGURATION'-Message VPN settings, such as topics, topic endpoints, queues, ACL profiles, client profiles, REST Delivery Points (including any configured client certificates).</li>\n<li>'CERTIFICATE_AUTHORITIES'-Domain and Client Certificate Authorities (CAs).</li>\n</ul>\n<p>If you don't specify an attribute (default), all the supported settings except for the 'CERTIFICATE_AUTHORITIES' settings are cloned to the new service.</p>",
            "example": {
               "components": [
                  "SERVICE_CONFIGURATION",
                  "BROKER_CONFIGURATION",
                  "CERTIFICATE_AUTHORITIES"
               ]
            }
         },
         "MessageSpool": {
            "required": [
               "messageSpoolSizeInGB"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "readOnly": true
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes.",
                  "readOnly": true,
                  "example": "messageSpool"
               },
               "messageSpoolSizeInGB": {
                  "maximum": 6000,
                  "minimum": 10,
                  "type": "integer",
                  "description": "The new size of the message spool in gigabytes (GB).",
                  "format": "int32",
                  "example": 50
               }
            }
         },
         "UpdateServiceRequest": {
            "type": "object",
            "properties": {
               "name": {
                  "maxLength": 50,
                  "type": "string",
                  "description": "The new service name. The new service name must be unique within an organization.",
                  "example": "My-First-Service"
               },
               "ownedBy": {
                  "type": "string",
                  "description": "The owner of the event broker service. The owner must belong to the same organization.",
                  "example": "xjllt9rg"
               },
               "locked": {
                  "type": "boolean",
                  "description": "Indicates whether the event broker service has deletion protection enabled. The valid values are 'true' (enabled) or 'false' (disabled). The default is 'false'.",
                  "example": true
               }
            }
         },
         "Broker": {
            "type": "object",
            "properties": {
               "version": {
                  "type": "string",
                  "description": "The version number for the event broker service.",
                  "example": "10.1.1.29"
               },
               "versionFamily": {
                  "type": "string",
                  "description": "Version Family, a truncated form of the version."
               },
               "maxSpoolUsage": {
                  "type": "integer",
                  "description": "The maximum message spool usage allowed on the event broker service, in gigabytes (GB).",
                  "format": "int32"
               },
               "diskSize": {
                  "type": "integer",
                  "description": "The disk size for the message spool, in gigabytes (GB).",
                  "format": "int32"
               },
               "redundancyGroupSslEnabled": {
                  "type": "boolean",
                  "description": "Enable or disable SSL for the redundancy group (for mate-link encryption).  The default value is false and the valid values are: <p><ul><li>'true' - enabled</li><li>'false' - disabled</li></ul></p>",
                  "example": true,
                  "default": false
               },
               "configSyncSslEnabled": {
                  "type": "boolean",
                  "description": "Enable or disable Config-Sync encryption (SSL). The default value is true, and the valid values are: <p><ul><li>'true' - enabled</li><li>'false' - disabled</li></ul></p>",
                  "example": true,
                  "default": false
               },
               "monitoringMode": {
                  "type": "string",
                  "description": "The monitoring mode. This can be 'BASIC' or 'ADVANCED'. The value of BASIC is default monitoring and ADVANCED means that monitoring of the event broker is enabled.",
                  "enum": [
                     "BASIC",
                     "ADVANCED"
                  ]
               },
               "clientCertificateAuthorities": {
                  "type": "array",
                  "description": "The list of client certificate authorities.",
                  "items": {
                     "$ref": "#/components/schemas/CertificateAuthority"
                  }
               },
               "domainCertificateAuthorities": {
                  "type": "array",
                  "description": "The list of domain certificate authorities.",
                  "items": {
                     "$ref": "#/components/schemas/CertificateAuthority"
                  }
               },
               "tlsStandardDomainCertificateAuthoritiesEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether TLS Standard Domain Certificate Authorities is enabled."
               },
               "ldapProfiles": {
                  "type": "array",
                  "description": "The LDAP profiles configured for the event broker service.",
                  "items": {
                     "$ref": "#/components/schemas/LdapProfile"
                  }
               },
               "cluster": {
                  "$ref": "#/components/schemas/Cluster"
               },
               "managementReadOnlyLoginCredential": {
                  "$ref": "#/components/schemas/ManagementLoginCredential"
               },
               "msgVpns": {
                  "type": "array",
                  "description": "The list of Message VPNs configured on the event broker service.",
                  "items": {
                     "$ref": "#/components/schemas/MsgVpn"
                  }
               }
            },
            "description": "Broker Details available on expand only."
         },
         "CertificateAuthority": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "Name"
               }
            },
            "description": "The certificate authority."
         },
         "ClientProfileBase": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "name": {
                  "maxLength": 32,
                  "minLength": 1,
                  "pattern": "[a-zA-Z0-9-_]*",
                  "type": "string",
                  "description": "The name of the client profile."
               }
            },
            "description": "The client profile configured on the event broker service."
         },
         "Cluster": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "The name of the DMR cluster."
               },
               "password": {
                  "type": "string",
                  "description": "The password for the cluster.",
                  "format": "password"
               },
               "remoteAddress": {
                  "type": "string",
                  "description": "The address of the remote node in the cluster."
               },
               "primaryRouterName": {
                  "type": "string",
                  "description": "The name of the primary event broker."
               },
               "backupRouterName": {
                  "type": "string",
                  "description": "The name of the backup event broker."
               },
               "monitoringRouterName": {
                  "type": "string",
                  "description": "The name of the monitoring node."
               },
               "supportedAuthenticationMode": {
                  "type": "array",
                  "description": "The authentication mode between the nodes in the DMR cluster.",
                  "items": {
                     "type": "string",
                     "description": "The authentication mode between the nodes in the DMR cluster."
                  }
               }
            },
            "description": "The DMR cluster details."
         },
         "EventBrokerServiceVersionDetails": {
            "type": "object",
            "properties": {
               "releaseStatus": {
                  "type": "string",
                  "description": "The event broker service version release status.",
                  "enum": [
                     "REVOKED"
                  ]
               },
               "releaseStatusDetails": {
                  "type": "string",
                  "description": "The event broker service version release status details."
               }
            },
            "description": "The event broker service version details."
         },
         "InfrastructureDetails": {
            "type": "object",
            "properties": {
               "infrastructureId": {
                  "type": "string",
                  "description": "The identifier of the infrastructure."
               },
               "primaryNodeHostname": {
                  "type": "string",
                  "description": "The primary node hostname."
               },
               "backupNodeHostname": {
                  "type": "string",
                  "description": "The backup node hostname."
               },
               "monitoringNodeHostname": {
                  "type": "string",
                  "description": "The monitoring node hostname."
               }
            },
            "description": "Infrastructure details per service. Available on expand only."
         },
         "LdapProfile": {
            "type": "object",
            "properties": {
               "name": {
                  "type": "string",
                  "description": "The name of the LDAP profile."
               }
            },
            "description": "The LDAP profiles configured for the event broker service."
         },
         "LoginCredential": {
            "type": "object",
            "properties": {
               "username": {
                  "type": "string",
                  "description": "The username to log into the event broker service."
               },
               "password": {
                  "type": "string",
                  "description": "The password to log into the event broker service.",
                  "format": "password"
               }
            },
            "description": "The login credentials for the event broker service."
         },
         "ManagementLoginCredential": {
            "type": "object",
            "properties": {
               "username": {
                  "type": "string",
                  "description": "The username to log into the event broker service."
               },
               "password": {
                  "type": "string",
                  "description": "The password to log into the event broker service.",
                  "format": "password"
               },
               "token": {
                  "type": "string",
                  "description": "The token for management access.",
                  "example": "YWJj.eyJhY2Nlc3NfdG9rZW4iOiAjJzN28wZm04In0%3D.eHl6"
               }
            },
            "description": "The mission control manager login credentials"
         },
         "MessageSpoolDetails": {
            "type": "object",
            "properties": {
               "expandedGbBilled": {
                  "type": "integer",
                  "description": "The number of GB billed for the service class.",
                  "format": "int32"
               },
               "defaultGbSize": {
                  "type": "integer",
                  "description": "The default spool size for the service class in GB.",
                  "format": "int32"
               },
               "totalGbSize": {
                  "type": "integer",
                  "description": "The total spool size in GB.",
                  "format": "int32"
               }
            },
            "description": "Message Spool details per service. Available on expand only."
         },
         "MsgVpn": {
            "type": "object",
            "properties": {
               "msgVpnName": {
                  "type": "string",
                  "description": "The name of the Message VPN."
               },
               "authenticationBasicEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether basic authentication is enabled."
               },
               "authenticationBasicType": {
                  "type": "string",
                  "description": "The authentication type.",
                  "enum": [
                     "INTERNAL",
                     "LDAP",
                     "RADIUS",
                     "NONE"
                  ]
               },
               "authenticationClientCertEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether client certificate authentication is enabled."
               },
               "authenticationClientCertValidateDateEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether the validation of the 'Not Before' and 'Not After' dates in a client certificate is enabled."
               },
               "authenticationOauthEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether OAuth authentication is enabled for the Message VPN."
               },
               "clientProfiles": {
                  "type": "array",
                  "description": "The client profiles configured on the Message VPN.",
                  "items": {
                     "$ref": "#/components/schemas/ClientProfileBase"
                  }
               },
               "enabled": {
                  "type": "boolean",
                  "description": "Enabled"
               },
               "eventLargeMsgThreshold": {
                  "type": "integer",
                  "description": "The large message threshold generates events when the size of a message in a Message VPN exceeds a specified size.",
                  "format": "int32"
               },
               "managementAdminLoginCredential": {
                  "$ref": "#/components/schemas/ManagementLoginCredential"
               },
               "missionControlManagerLoginCredential": {
                  "$ref": "#/components/schemas/ManagementLoginCredential"
               },
               "serviceLoginCredential": {
                  "$ref": "#/components/schemas/LoginCredential"
               },
               "maxConnectionCount": {
                  "type": "integer",
                  "description": "The maximum number of clients that are permitted to simultaneously connect to the Message VPN.\n",
                  "format": "int32"
               },
               "maxEgressFlowCount": {
                  "type": "integer",
                  "description": "The maximum number of egress flows (that is, Guaranteed message client receive flows or consumer flows) that can be created by a single client.",
                  "format": "int32"
               },
               "maxEndpointCount": {
                  "type": "integer",
                  "description": "The maximum number of flows that can bind to a non-exclusive durable topic endpoint.",
                  "format": "int32"
               },
               "maxIngressFlowCount": {
                  "type": "integer",
                  "description": "The total permitted number of ingress flows (that is, Guaranteed Message client publish flows) for a Message VPN.",
                  "format": "int32"
               },
               "maxMsgSpoolUsage": {
                  "type": "integer",
                  "description": "The maximum message spool usage.",
                  "format": "int32"
               },
               "maxSubscriptionCount": {
                  "type": "integer",
                  "description": "The maximum number of unique subscriptions.",
                  "format": "int32"
               },
               "maxTransactedSessionCount": {
                  "type": "integer",
                  "description": "The maximum number of simultaneous transacted sessions and/or XA Sessions allowed for the given Message VPN.",
                  "format": "int32"
               },
               "maxTransactionCount": {
                  "type": "integer",
                  "description": "The total number of simultaneous transactions (both local transactions and transactions within distributed/XA transaction branches) in a Message VPN.",
                  "format": "int32"
               },
               "sempOverMessageBus": {
                  "$ref": "#/components/schemas/SEMPOverMsgBus"
               },
               "subDomainName": {
                  "type": "string",
                  "description": "The generated hostname assigned for the Message VPN.  For example, 'mr54hcalmefac.messaging.solace.cloud'."
               },
               "truststoreUri": {
                  "type": "string",
                  "description": "The URI for the SSL trust store."
               }
            },
            "description": "The list of Message VPNs configured on the event broker service."
         },
         "SEMPOverMsgBus": {
            "type": "object",
            "properties": {
               "sempOverMsgBusEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether SEMP over Message Bus is enabled.  When enabled for a Message VPN, clients have access to a limited subset of the event broker management commands."
               },
               "sempAccessToShowCmdsEnabled": {
                  "type": "boolean",
                  "description": "Indicates if users without admin access can see ‘show' commands in SEMP. The default value is false and the valid values are:  <p><ul><li>'true' - can see 'show' SEMP commands</li><li>'false' - cannot see 'show' SEMP commands</li></ul></p>",
                  "example": true,
                  "default": false
               },
               "sempAccessToAdminCmdsEnabled": {
                  "type": "boolean",
                  "description": "Indicates if users with admin access can use SEMP commands. The default value is false and the valid values are:  <p><ul><li>'true' - can use SEMP commands</li><li>'false' - cannot use SEMP commands</li></ul></p>",
                  "example": true,
                  "default": false
               },
               "sempAccessToClientAdminCmdsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether access to SEMP Client-Admin commands is enabled."
               },
               "sempAccessToCacheCmdsEnabled": {
                  "type": "boolean",
                  "description": "SEMP Access to Cache Commands Enabled"
               }
            },
            "description": "Indicates whether SEMP-Over-Message-Bus attributes is enabled."
         },
         "Service": {
            "required": [
               "eventBrokerServiceVersion"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The identifier of the event broker service."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "name": {
                  "type": "string",
                  "description": "The name of the event broker service."
               },
               "eventBrokerServiceVersion": {
                  "type": "string"
               },
               "createdBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who created the event broker service."
               },
               "createdTime": {
                  "type": "string",
                  "description": "The time the event broker service was created, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "updatedBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who last updated the event broker service."
               },
               "updatedTime": {
                  "type": "string",
                  "description": "The time of the last update was performed on the event broker service, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "ownedBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who owns the event broker service."
               },
               "infrastructureId": {
                  "type": "string",
                  "description": "A unique identifier representing for the infrastructure of the event broker service."
               },
               "datacenterId": {
                  "type": "string",
                  "description": "The identifier of the datacenter."
               },
               "serviceClassId": {
                  "$ref": "#/components/schemas/ServiceClassId"
               },
               "eventMeshId": {
                  "type": "string",
                  "description": "The identifier of the event mesh for which the event broker service belongs, if applicable."
               },
               "ongoingOperationIds": {
                  "type": "array",
                  "description": "The operation identifiers for an ongoing operation on the event broker service.",
                  "items": {
                     "type": "string"
                  }
               },
               "adminState": {
                  "$ref": "#/components/schemas/ServiceAdminState"
               },
               "creationState": {
                  "$ref": "#/components/schemas/ServiceCreationState"
               },
               "errorMessage": {
                  "type": "string",
                  "description": "The error message if the event broker service creation failed."
               },
               "errorId": {
                  "type": "string",
                  "description": "The error ID if the event broker service creation failed."
               },
               "locked": {
                  "type": "boolean",
                  "description": "Indicates whether the event broker service has deletion protection enabled. The valid values are 'true' (enabled) or 'false' (disabled)."
               },
               "allowedActions": {
                  "type": "array",
                  "description": "The allowed actions the user can perform on the event broker service and its configurations,  including: '<code>get</code>','<code>configure</code>','<code>update</code>','<code>broker_update</code>','<code>delete</code>','<code>assign</code>'.",
                  "items": {
                     "type": "string",
                     "description": "The allowed actions the user can perform on the event broker service and its configurations,  including: '<code>get</code>','<code>configure</code>','<code>update</code>','<code>broker_update</code>','<code>delete</code>','<code>assign</code>'."
                  }
               },
               "messageSpoolDetails": {
                  "$ref": "#/components/schemas/MessageSpoolDetails"
               },
               "environmentId": {
                  "type": "string",
                  "description": "The unique identifier of the environment the service is associated with."
               },
               "eventBrokerServiceVersionDetails": {
                  "$ref": "#/components/schemas/EventBrokerServiceVersionDetails"
               },
               "msgVpnName": {
                  "type": "string",
                  "description": "The name of the event broker service Message VPN."
               },
               "defaultManagementHostname": {
                  "type": "string",
                  "description": "Default management hostname."
               },
               "serviceConnectionEndpoints": {
                  "type": "array",
                  "description": "Connection Endpoints available on expand only.",
                  "items": {
                     "$ref": "#/components/schemas/ConnectionEndpoint"
                  }
               },
               "broker": {
                  "$ref": "#/components/schemas/Broker"
               },
               "infrastructureDetails": {
                  "$ref": "#/components/schemas/InfrastructureDetails"
               }
            }
         },
         "ServiceAdminState": {
            "type": "string",
            "description": "The administration state of the event broker service.",
            "enum": [
               "INITIAL",
               "START",
               "STOP",
               "DESTROY"
            ]
         },
         "ServiceCreationState": {
            "type": "string",
            "description": "The creation state of the event broker service.",
            "enum": [
               "PENDING",
               "INPROGRESS",
               "COMPLETED",
               "FAILED"
            ]
         },
         "ServiceResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/Service"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "Environment": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The unique identifier for this environment."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "allowServiceCreationInPublicRegions": {
                  "type": "boolean",
                  "description": "When this setting is false, it blocks the creation of services in public regions in this environment."
               }
            }
         },
         "EnvironmentResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/Environment"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "EnvironmentRequest": {
            "type": "object",
            "properties": {
               "allowServiceCreationInPublicRegions": {
                  "type": "boolean",
                  "description": "When this setting is false, it blocks the creation of services in public regions in this environment."
               }
            }
         },
         "Datacenter": {
            "required": [
               "available",
               "datacenterType",
               "name",
               "operState",
               "provider",
               "visible"
            ],
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The identifier of the datacenter."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "name": {
                  "type": "string",
                  "description": "The name of the datacenter."
               },
               "visible": {
                  "type": "boolean",
                  "description": "Indicates whether the datacenter is visible."
               },
               "datacenterType": {
                  "pattern": "^Unknown$|^SolacePublic$|^SolaceDedicated$|^CustomerCloud$|^CustomerOnPrem$",
                  "type": "string",
                  "description": "The type of the datacenter, in terms of ownership. The valus can be a Public Region( 'SolacePublic'), a Dedicated Region('SolaceDedicated'), or a Customer-Controlled Region ('CustomerCloud' or 'CustomerOnPrem').",
                  "example": "SolacePublic"
               },
               "provider": {
                  "type": "string",
                  "description": "The name of the cloud provider for the datacenter.",
                  "example": "aws"
               },
               "operState": {
                  "pattern": "^up$|^down$",
                  "type": "string",
                  "description": "The operational state of the datacenter. The values can be 'up' or 'down'.",
                  "example": "up"
               },
               "location": {
                  "$ref": "#/components/schemas/Location"
               },
               "createdBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who created the datacenter."
               },
               "createdTime": {
                  "type": "string",
                  "description": "The time the datacenter was created, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "updatedBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who last updated the datacenter."
               },
               "updatedTime": {
                  "type": "string",
                  "description": "The time of the last update was performed on the datacenter, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "available": {
                  "type": "boolean",
                  "description": "Indicates whether the datacenter is available."
               },
               "supportedServiceClasses": {
                  "type": "array",
                  "description": "The list of supported service classes in the datacenter.",
                  "example": [
                     "DEVELOPER",
                     "ENTERPRISE_1K_HIGHAVAILABILITY",
                     "ENTERPRISE_1K_STANDALONE"
                  ],
                  "items": {
                     "$ref": "#/components/schemas/ServiceClassId"
                  }
               },
               "cloudAgentVersion": {
                  "type": "string",
                  "description": "The version of the Mission Control Agent."
               },
               "k8sServiceType": {
                  "type": "string",
                  "description": "The type of the Kubernetes service. The values can be 'LOADBALANCER' or 'NODEPORT'.",
                  "example": "LOADBALANCER",
                  "enum": [
                     "LOADBALANCER",
                     "NODEPORT"
                  ]
               },
               "numSupportedPrivateEndpoints": {
                  "type": "integer",
                  "description": "The number of supported private endpoints.",
                  "format": "int32"
               },
               "numSupportedPublicEndpoints": {
                  "type": "integer",
                  "description": "The number of supported public endpoints.",
                  "format": "int32"
               },
               "organizationId": {
                  "type": "string",
                  "description": "The identifier of the datacenter's organization."
               },
               "spoolScaleUpCapabilityInfo": {
                  "$ref": "#/components/schemas/SpoolScaleUpCapabilityInfo"
               },
               "regionId": {
                  "type": "string",
                  "description": "The unique identifier for the datacenter region."
               },
               "environmentId": {
                  "type": "string",
                  "description": "The unique identifier of the datacenter's environment."
               }
            }
         },
         "DatacenterResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/Datacenter"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "Location": {
            "required": [
               "continent",
               "latitude",
               "longitude"
            ],
            "type": "object",
            "properties": {
               "longitude": {
                  "type": "string",
                  "description": "The longitude coordinate of the location for the datacenter."
               },
               "latitude": {
                  "type": "string",
                  "description": "The latitude coordinate of the location for the datacenter."
               },
               "continent": {
                  "type": "string",
                  "description": "The name of the continent where the datacenter is located."
               }
            }
         },
         "SpoolScaleUpCapabilityInfo": {
            "type": "object",
            "properties": {
               "spoolScaleUpCapabilityState": {
                  "pattern": "^UNKNOWN$|^IN_PROGRESS$|^SUPPORTED$|^NOT_SUPPORTED$",
                  "type": "string",
                  "description": "The current state of  the Scalable Message Spool Size feature. The values can be 'INPROGRESS', 'SUPPORTED', 'NOT SUPPORTED', or 'UNKNOWN'.",
                  "example": "IN_PROGRESS"
               },
               "spoolScaleUpTestTimestamp": {
                  "type": "string",
                  "description": "The time of the last test was performed, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "spoolScaleUpTestMessage": {
                  "type": "string",
                  "description": "Message resulting from a self-test of support for the Scalable Message Spool Size feature."
               }
            },
            "description": "<p>Deprecation Date: 2025-02-01</p>\n<p>Removal Date: 2025-04-01</p>\n<p>Reason: Spool scale-up tests are no longer required, as all Kubernetes-based datacenters provide this capability.</p>\n",
            "deprecated": true
         },
         "DatacenterRequest": {
            "type": "object",
            "properties": {
               "environmentId": {
                  "type": "string",
                  "description": "The unique identifier of the datacenter's environment.",
                  "example": "7kj4kwt04ge"
               }
            }
         },
         "LimitClassUsage": {
            "type": "object",
            "properties": {
               "limit": {
                  "type": "integer",
                  "format": "int32"
               },
               "inUse": {
                  "type": "integer",
                  "format": "int32"
               }
            },
            "description": "The service class usage and limits"
         },
         "ServiceClass": {
            "type": "object",
            "properties": {
               "id": {
                  "$ref": "#/components/schemas/ServiceClassId"
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for internal informational purposes."
               },
               "name": {
                  "type": "string",
                  "description": "The name of the service class."
               },
               "vpnConnections": {
                  "type": "integer",
                  "description": "The maximum number of client connections for the service class.",
                  "format": "int32"
               },
               "brokerScalingTier": {
                  "type": "string",
                  "description": "The underlying scaling tiers for the software event broker."
               },
               "vpnMaxSpoolSize": {
                  "type": "integer",
                  "description": "The maximum message spool size of the service class, in gigabytes (GB).",
                  "format": "int32"
               },
               "maxNumberVpns": {
                  "type": "integer",
                  "description": "The maximum number of Message VPNs for the service class.",
                  "format": "int32"
               },
               "highAvailabilityCapable": {
                  "type": "boolean",
                  "description": "Indicates whether the service class supports High-Availability. A value of 'True' indicates that high-availability is supported."
               },
               "limits": {
                  "uniqueItems": true,
                  "type": "array",
                  "description": "The service class usage and limits",
                  "items": {
                     "$ref": "#/components/schemas/LimitClassUsage"
                  }
               }
            }
         },
         "ServiceClassesResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/ServiceClass"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "ServiceClassResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/ServiceClass"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "MessageSpoolLimitClassesResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/MessageSpoolLimitUsage"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "MessageSpoolLimitUsage": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The unique identifier."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "name": {
                  "type": "string",
                  "description": "The name of the limit."
               },
               "addonLimit": {
                  "type": "integer",
                  "description": "Message spool expansion addon limit.",
                  "format": "int32"
               },
               "addonUsed": {
                  "type": "integer",
                  "description": " Message spool expansion addons used.",
                  "format": "int32"
               },
               "limit": {
                  "type": "integer",
                  "description": "The total amount of message spool expansion available.",
                  "format": "int32"
               },
               "used": {
                  "type": "integer",
                  "description": "The amount of message spool expansion used.",
                  "format": "int32"
               }
            }
         },
         "ServiceSummary": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The identifier of the event broker service."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "name": {
                  "type": "string",
                  "description": "The name of the event broker service."
               },
               "eventBrokerServiceVersion": {
                  "type": "string",
                  "description": "Event broker service version.",
                  "example": "10.0.1.62-0"
               },
               "createdBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who created the event broker service."
               },
               "createdTime": {
                  "type": "string",
                  "description": "The time the event broker service was created, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "updatedBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who last updated the event broker service."
               },
               "updatedTime": {
                  "type": "string",
                  "description": "The time of the last update was performed on the event broker service, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2022-03-14T15:01:34Z"
               },
               "ownedBy": {
                  "type": "string",
                  "description": "The unique identifier representing the user who owns the event broker service."
               },
               "infrastructureId": {
                  "type": "string",
                  "description": "A unique identifier representing for the infrastructure of the event broker service."
               },
               "datacenterId": {
                  "type": "string",
                  "description": "The identifier of the datacenter."
               },
               "serviceClassId": {
                  "$ref": "#/components/schemas/ServiceClassId"
               },
               "eventMeshId": {
                  "type": "string",
                  "description": "The identifier of the event mesh for which the event broker service belongs, if applicable."
               },
               "ongoingOperationIds": {
                  "type": "array",
                  "description": "The operation identifiers for an ongoing operation on the event broker service.",
                  "items": {
                     "type": "string"
                  }
               },
               "adminState": {
                  "$ref": "#/components/schemas/ServiceAdminState"
               },
               "creationState": {
                  "$ref": "#/components/schemas/ServiceCreationState"
               },
               "errorMessage": {
                  "type": "string",
                  "description": "The error message if the event broker service creation failed."
               },
               "errorId": {
                  "type": "string",
                  "description": "The error ID if the event broker service creation failed."
               },
               "locked": {
                  "type": "boolean",
                  "description": "Indicates whether the event broker service has deletion protection enabled. The valid values are 'true' (enabled) or 'false' (disabled)."
               },
               "allowedActions": {
                  "type": "array",
                  "description": "The allowed actions the user can perform on the event broker service and its configurations,  including: '<code>get</code>','<code>configure</code>','<code>update</code>','<code>broker_update</code>','<code>delete</code>','<code>assign</code>'.",
                  "items": {
                     "type": "string",
                     "description": "The allowed actions the user can perform on the event broker service and its configurations,  including: '<code>get</code>','<code>configure</code>','<code>update</code>','<code>broker_update</code>','<code>delete</code>','<code>assign</code>'."
                  }
               },
               "messageSpoolDetails": {
                  "$ref": "#/components/schemas/MessageSpoolDetails"
               },
               "environmentId": {
                  "type": "string",
                  "description": "The unique identifier of the environment the service is associated with."
               },
               "eventBrokerServiceVersionDetails": {
                  "$ref": "#/components/schemas/EventBrokerServiceVersionDetails"
               },
               "msgVpnName": {
                  "type": "string",
                  "description": "The name of the event broker service Message VPN."
               }
            }
         },
         "ServiceSummaryResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/ServiceSummary"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "CertificateType": {
            "type": "string",
            "description": "The certificate type.",
            "enum": [
               "SOLACE_MANAGED",
               "CUSTOM"
            ]
         },
         "ServerCertificateSummary": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The unique identifier for the server certificate. The server certificate ID is a combination of the event broker service ID where the server certificate is uploaded and the path to the server certificate."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "installed": {
                  "type": "boolean",
                  "description": "Indicates whether the certificate is installed."
               },
               "certificateType": {
                  "$ref": "#/components/schemas/CertificateType"
               }
            }
         },
         "ServerCertificateSummaryResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/ServerCertificateSummary"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "ServerCertificate": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string",
                  "description": "The unique identifier for the server certificate. The server certificate ID is a combination of the event broker service ID where the server certificate is uploaded and the path to the server certificate."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "installed": {
                  "type": "boolean",
                  "description": "Indicates whether the certificate is installed."
               },
               "certificateType": {
                  "$ref": "#/components/schemas/CertificateType"
               },
               "validityNotBefore": {
                  "type": "string",
                  "description": "The date the server certificate is valid from in ISO 8601 date/time format."
               },
               "validityNotAfter": {
                  "type": "string",
                  "description": "The date the server certificate expires, in ISO 8601 date/time format."
               },
               "subjectCN": {
                  "type": "string",
                  "description": "The server certificate’s common name (CN)."
               },
               "serialNumber": {
                  "type": "string",
                  "description": "The server certificate’s serial number. The certificate authority issues the serial number, which uniquely identifies the certificate."
               },
               "sha1Thumbprint": {
                  "type": "string",
                  "description": "The server certificate's SHA-1 Thumbprint. This value is the SHA-1 digest of the server certificate under DER form.  Equivalent of 'openssl x509 -fingerprint'."
               },
               "installedCertificateDetails": {
                  "type": "string",
                  "description": "This field appears only for an installed server certificate. The field provides information about the server certificate, and subject public key in a string, including: Serial Number, Signature Algorithm, Issuer, Validity dates, Subject, and Subject public key info. The Subject public key info includes: Public Key Algorithm, RSA Public Key value, and Modulus.This field is only present when the certificate is installed."
               }
            }
         },
         "ServerCertificateResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/ServerCertificate"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "ClientProfileSummary": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "name": {
                  "maxLength": 32,
                  "minLength": 1,
                  "pattern": "[a-zA-Z0-9-_]*",
                  "type": "string",
                  "description": "The name of the client profile."
               },
               "id": {
                  "type": "string",
                  "description": "The identifier of the client profile."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "allowGuaranteedMsgSendEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned the client profile are allowed to publish guaranteed messages. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowGuaranteedMsgReceiveEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to bind to topic endpoints or queues to receive guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed). The default is 'false'."
               },
               "allowTransactedSessionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to establish transacted sessions or XA sessions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'true'."
               },
               "allowBridgeConnectionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to establish Dynamic Messaging Routing (DMR) links (or bridge links) from the current Message VPN to another Message VPN in a separate event broker service. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowGuaranteedEndpointCreateEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to create queues or topic endpoints. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               }
            },
            "description": "The client profile configured on the event broker service."
         },
         "ClientProfilesResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/ClientProfileSummary"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "ClientProfile": {
            "required": [
               "name"
            ],
            "type": "object",
            "properties": {
               "name": {
                  "maxLength": 32,
                  "minLength": 1,
                  "pattern": "[a-zA-Z0-9-_]*",
                  "type": "string",
                  "description": "The name of the client profile."
               },
               "id": {
                  "type": "string",
                  "description": "The identifier of the client profile."
               },
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "allowGuaranteedMsgSendEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to publish guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed) . The default is 'false'."
               },
               "allowGuaranteedMsgReceiveEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to bind to topic endpoints or queues to receive guaranteed messages. The valid values are 'true' (allowed) or 'false' (not allowed). The default is 'false'."
               },
               "compressionEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to transfer data using compression. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'true'."
               },
               "replicationAllowClientConnectWhenStandbyEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to remain connected to the Message VPN when its replication state is Standby. This situation may occur when the Message VPN Replication state of the event broker service changes from Active to Standby. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowTransactedSessionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether client applications client applications assigned to the client profile are allowed to establish transacted sessions or XA sessions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowBridgeConnectionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to establish Dynamic Messaging Routing (DMR) links (or bridge links) from the current Message VPN to another Message VPN in a separate event broker service. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowGuaranteedEndpointCreateEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to create queues or topic endpoints. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "allowSharedSubscriptionsEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to use shared subscriptions. The valid values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "apiQueueManagementCopyFromOnCreateName": {
                  "maxLength": 200,
                  "minLength": 0,
                  "type": "string",
                  "description": "<p><em>Removal Date: 2024-05-26</em></p><p><em>Reason: Replaced by apiQueueManagementCopyFromOnCreateTemplateName</em></p><p>The name of a queue template to copy settings from when a new queue is created by the client using the client profile. If the specified queue template does not exist, creation fails. Deprecated since 2.14. This attribute has been replaced with apiQueueManagementCopyFromOnCreateTemplateName.</p>",
                  "deprecated": true
               },
               "apiQueueManagementCopyFromOnCreateTemplateName": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string",
                  "description": "The name of a queue template to copy settings from when a new queue is created by the client using the client profile. If the specified queue template does not exist, creation fails."
               },
               "apiTopicEndpointManagementCopyFromOnCreateName": {
                  "maxLength": 200,
                  "minLength": 0,
                  "type": "string",
                  "description": "<p><em>Removal Date: 2024-05-26</em></p><p><em>Reason: Replaced by apiTopicEndpointManagementCopyFromOnCreateTemplateName</em></p><p>The name of a topic endpoint to copy settings from when a new topic endpoint is created by the client using the client profile. If the specified topic endpoint does not exist, creation fails. Deprecated since 2.14. This attribute has been replaced with apiTopicEndpointManagementCopyFromOnCreateTemplateName.</p>",
                  "deprecated": true
               },
               "apiTopicEndpointManagementCopyFromOnCreateTemplateName": {
                  "maxLength": 255,
                  "minLength": 0,
                  "type": "string",
                  "description": "The name of a topic endpoint to copy settings from when a new topic endpoint is created by the client using the client profile. If the specified topic endpoint does not exist, creation fails."
               },
               "serviceMinKeepaliveTimeout": {
                  "type": "integer",
                  "description": "The minimum period of time (in seconds) that the event broker service will tolerate inactivity on the client connection. This keepalive value is also enforced for MQTT and SMF (Solace Message Format) connections. The keepalive timeout value is calculated based on the client provided timeout interval (3 x the keepalive interval for SMF, 1.5 x the keepalive interval for MQTT). The default is 30 and valid ranges are 3–3600.",
                  "format": "int32"
               },
               "serviceSmfMinKeepaliveEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients using the client profile have the minimum keep-alive timeout enabled for SMF (Solace Message Format) connections. The valid values are 'true' (enabled) and 'false' (not enabled). The default is 'false'."
               },
               "serviceWebInactiveTimeout": {
                  "type": "integer",
                  "description": "The number of seconds a Web client has to send a request before its session times out and be terminated for being inactive. The default value is 30 seconds.",
                  "format": "int32"
               },
               "serviceWebMaxPayload": {
                  "type": "integer",
                  "description": "The maximum transport payload size (in bytes) before fragmentation occurs for clients using the client profile. The size of the header is not included.\n\nSolace Message Format (SMF) messages that are sent to a consuming Web client are contained within a Web transport message that the event broker sends in its HTTP response to that client. Each Web transport message that is sent can contain multiple SMF messages or partial SMF messages.\nThe maximum Web payload value sets the maximum number of bytes allowed in a single Web transport message (not including the header). This value determines the number of SMF messages that can be sent in a single HTTP response and the size of the Web transport message sent in the HTTP response. The value range is 300 to 10000000, in bytes. The default is 1000000 bytes.\n\nSMF messages that are sent to a consuming Web client are contained within a Web transport message that the event broker sends in its HTTP response to that client. Each Web transport message that is sent can contain multiple SMF messages or partial SMF messages.\n\nThe maximum Web payload value sets the maximum number of bytes allowed in a single Web transport message (not including the header). This value determines the number of SMF messages that can be sent in a single HTTP response and the size of the Web transport message sent in the HTTP response. Note that large SMF messages can be fragmented across Web transport messages to respect the value set for the maximum possible Web payload.\n)",
                  "format": "int32"
               },
               "maxConnectionCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum permitted number of simultaneous Web transport client connections to the event broker service that can be made using the same client username account. The default is the maximum value supported by the platform.",
                  "format": "int32"
               },
               "serviceSmfMaxConnectionCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum permitted number of simultaneous Solace Message Format (SMF) client connections to the event broker that can be made using the same client username account. The default is the maximum value supported by the platform.",
                  "format": "int32"
               },
               "serviceWebMaxConnectionCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum permitted number of simultaneous Web transport client connections to the event broker service that can be made using the same client username account. The default is the maximum value supported by the platform.",
                  "format": "int32"
               },
               "maxEndpointCountPerClientUsername": {
                  "type": "integer",
                  "description": "The maximum number of durable and non-durable queues and topic endpoints that can be owned by the clients using the same client username within a client profile. The default is 1000.",
                  "format": "int32"
               },
               "maxEgressFlowCount": {
                  "type": "integer",
                  "description": "The maximum number of egress flows (that is, Guaranteed Message client receive flows or consumer flows) that can be created by a single client associated with this client profile. The default is 1000.",
                  "format": "int32"
               },
               "maxIngressFlowCount": {
                  "type": "integer",
                  "description": "The maximum number of ingress flows (that is, Guaranteed Message client publish flows) that can be created by a single client associated with this client profile. The default is 1000.",
                  "format": "int32"
               },
               "maxSubscriptionCount": {
                  "type": "integer",
                  "description": "The maximum number of subscriptions for a single client in the client profile. When you set this option, consider the total maximum number of permitted topic subscriptions and the total maximum number of client connections for the type of event broker that is used. That is, to ensure reliable system performance, you must find the right balance for your network, while staying within the system limits mentioned. The balance is generally between allowing the creation of many client applications and allowing each client to add a large number of topic subscriptions. The default varies by platform.",
                  "format": "int32"
               },
               "maxTransactedSessionCount": {
                  "type": "integer",
                  "description": "The maximum number of simultaneous transacted sessions and/or XA sessions allowed for a single client associated with the client profile. The default is 10.",
                  "format": "int32"
               },
               "maxTransactionCount": {
                  "type": "integer",
                  "description": "The total maximum number of simultaneous transactions (both local transactions and transactions within the XA transaction branches) allowed for a single client associated with the client profile. The default varies by platform.",
                  "format": "int32"
               },
               "queueGuaranteed1MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Guaranteed Messages that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueGuaranteed1MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Guaranteed Message queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 255. The value of 255 is recommended for memory usage optimized configurations, such as message applications; a value of 66000 is for WAN optimized configurations.",
                  "format": "int32"
               },
               "queueDirect1MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Direct Messages 1 [Class of Service (COS) 1] that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000..",
                  "format": "int32"
               },
               "queueDirect1MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 1 (COS 1) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "queueDirect2MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Direct Messages 2 (COS 2) that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueDirect2MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 2 (COS 2) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "queueDirect3MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Direct Messages 3 [Class of Service (COS) 3] that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueDirect3MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 3 (COS 3) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "queueControl1MaxDepth": {
                  "type": "integer",
                  "description": "The egress queue maximum depth for Control 1 that represents the number of work units for the client priority queues. The valid range is 2 to 262144. The default is 20000.",
                  "format": "int32"
               },
               "queueControl1MinMsgBurst": {
                  "type": "integer",
                  "description": "The minimum number of messages that must be on the Direct 1 (COS 1) queue before the queue’s depth is checked against the maximum depth setting (thereby allowing the queue to absorb a burst of large messages that exceeds the number of allowed work units). A valid range is 0 to 262144 with the default of 4.",
                  "format": "int32"
               },
               "tcpCongestionWindowSize": {
                  "type": "integer",
                  "description": "The TCP initial congestion window size is the number of segments that TCP sends before waiting for an acknowledgment from the peer. The TCP initial congestion window size is used when starting up a TCP connection or on recovery from idle (that is, no traffic). Larger values of the initial window allows a connection to come up to speed more quickly. For further details, refer to RFC 2581.\nChanging the TCP initial congestion window size from its default of 2 results in non-compliance with RFC 2581. Further, if this setting is set to a value too high, it may cause congestion in the network. Contact support before you attempt to change this TCP parameter.",
                  "format": "int32"
               },
               "tcpKeepaliveCount": {
                  "type": "integer",
                  "description": "The maximum number of keepalive probes (from 2 to 5 ) that TCP should send before dropping the connection. The default is 5.",
                  "format": "int32"
               },
               "tcpKeepaliveIdleTime": {
                  "type": "integer",
                  "description": "The time (from 3 to 120 seconds) a connection must remain idle before TCP begins sending keepalive probes. The default is 3.",
                  "format": "int32"
               },
               "tcpKeepaliveInterval": {
                  "type": "integer",
                  "description": "The time (from 1 to 30 seconds) to set as the interval between individual keepalive probes. The default is 1.",
                  "format": "int32"
               },
               "tcpMaxSegmentSize": {
                  "type": "integer",
                  "description": "The TCP maximum segment size (MSS) used for client to the event broker service. The default is 1460.",
                  "format": "int32"
               },
               "tcpMaxWindowSize": {
                  "type": "integer",
                  "description": "The TCP window size between the event broker service and the client.\nIf the maximum window size is set to less than the bandwidth-delay product, then the TCP connection operates below its maximum potential throughput. If the maximum window is set to less than about twice the bandwidth-delay product, then occasional packet loss causes the TCP connection to operate below its maximum potential throughput as it handles the missing acknowledgments and retransmissions. The default is 256.\n\nAlternately, if the TCP maximum window size is set too large, in the presence of a high offered load, TCP gradually increases its congestion window size until either the congestion window size reaches the maximum window size, or packet loss occurs in the network.\n\nInitially, when the TCP congestion window size is small, the physical bandwidth-delay of the network acts as a memory buffer for packets in flight. But as the congestion window crosses the bandwidth-delay product, the buffering of in-flight packets moves to queues in event broker services and other equipment throughout the network. As the TCP congestion window continues to increase in size, these various equipment queues overflow, causing packet loss and TCP backoff.",
                  "format": "int32"
               },
               "elidingDelay": {
                  "type": "integer",
                  "description": "The amount of time to delay the delivery of messages to a client after the initial message has been delivered. You can specify a value from 0-6000 milliseconds. The default is 0.",
                  "format": "int32"
               },
               "elidingEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned to the client profile are allowed to use eliding. Eliding allows clients to define a custom per-topic rate for client applications so they can effectively consume relevant messages, rather than queuing up outdated messages. For example, when eliding is configured, clients could receive direct messages for their topic subscriptions at a rate of at most five per second, per topic–even though the source is publishing updates at a much higher rate. The valid values are 'true' (enabled) and 'false' (not enabled). The default is 'false'."
               },
               "elidingMaxTopicCount": {
                  "type": "integer",
                  "description": "The maximum number of topics the event broker service that can track for performing the eliding function on each client connection. You can specify a value from 1-320000. The default is 256.",
                  "format": "int32"
               },
               "rejectMsgToSenderOnNoSubscriptionMatchEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned the client profile are allowed to return NACKs (negative acknowledgements) for guaranteed messages that do not have a that do not have a matching guaranteed message subscription. The value values are 'true' (allowed) and 'false' (not allowed). The default is 'false'."
               },
               "tlsAllowDowngradeToPlainTextEnabled": {
                  "type": "boolean",
                  "description": "Indicates whether clients assigned the client profile are allowed to use TLS/SSL encryption to protect the clients' credentials. This setting doesn't encrypt the data that is transmitted after the clients are authenticated and authorized. This also allows connecting client applications to request to downgrade of their TLS/SSL connections to the Message VPN to a plain-text connection, and if that Message VPN allows TLS/SSL connection downgrades, after the clientsʼ login handshake are finished, their connections are downgraded. This means that the clientsʼ authentication data is still encrypted, but the subsequent application data that is transmitted is sent as non-encrypted plain-text. The valid values are 'true (allowed) or 'false (not allowed). The default is 'true'."
               },
               "eventClientProvisionedEndpointSpoolUsageThreshold": {
                  "$ref": "#/components/schemas/ProvisionedEndpointSpoolUsageAlertThresholds"
               }
            },
            "description": "The client profile configured on the event broker service."
         },
         "ClientProfileResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/ClientProfile"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "EventBrokerVersions": {
            "type": "object",
            "properties": {
               "id": {
                  "type": "string"
               },
               "type": {
                  "type": "string"
               },
               "defaultEventBrokerVersion": {
                  "type": "string"
               },
               "latestK8sEventBrokerVersion": {
                  "type": "string"
               }
            }
         },
         "EventBrokerVersionsResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "$ref": "#/components/schemas/EventBrokerVersions"
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "DatacentersResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/Datacenter"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "EventBrokerServiceVersion": {
            "required": [
               "capabilities",
               "containerImageTag",
               "endOfFullSupport",
               "endOfTechnicalSupport",
               "minimumK8sVersion",
               "minimumMcaVersion",
               "releaseChannel",
               "releaseDate",
               "releaseNotes",
               "supportedServiceClasses",
               "version"
            ],
            "type": "object",
            "properties": {
               "type": {
                  "type": "string",
                  "description": "The type of object for informational purposes."
               },
               "id": {
                  "type": "string",
                  "description": "Event broker service id.",
                  "readOnly": true
               },
               "version": {
                  "type": "string",
                  "description": "Event broker service version.",
                  "example": "10.0.1.62-0"
               },
               "containerImageTag": {
                  "type": "string",
                  "description": "The container image tag that will be pulled when creating the event broker.",
                  "example": "10.0.1.62"
               },
               "supportedServiceClasses": {
                  "type": "array",
                  "description": "Supported service classes.",
                  "example": [
                     "DEVELOPER",
                     "ENTERPRISE_1K_HIGHAVAILABILITY",
                     "ENTERPRISE_1K_STANDALONE"
                  ],
                  "items": {
                     "$ref": "#/components/schemas/ServiceClassId"
                  }
               },
               "capabilities": {
                  "type": "array",
                  "description": "The capabilities of the event broker service.",
                  "example": [
                     "portDisabling",
                     "portRemapping"
                  ],
                  "items": {
                     "type": "string",
                     "description": "The capabilities of the event broker service.",
                     "example": "[\"portDisabling\",\"portRemapping\"]"
                  }
               },
               "releaseChannel": {
                  "$ref": "#/components/schemas/ReleaseChannel"
               },
               "releaseNotes": {
                  "type": "string",
                  "description": "Release notes describing the content of this event broker version.",
                  "example": "This release contains..."
               },
               "minimumMcaVersion": {
                  "type": "string",
                  "description": "The minimum Mission Control Agent version required to deploy this event broker version.",
                  "example": "v1.20230905"
               },
               "minimumK8sVersion": {
                  "type": "string",
                  "description": "The minimum Kubernetes cluster version required to deploy this event broker version.",
                  "example": "1.25"
               },
               "releaseDate": {
                  "type": "string",
                  "description": "The date the event broker version was released, in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2023-09-05T17:16:21Z"
               },
               "endOfFullSupport": {
                  "type": "string",
                  "description": "The date full support for the event broker version ends in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2023-09-05T17:16:21Z"
               },
               "endOfTechnicalSupport": {
                  "type": "string",
                  "description": "The date technical support for the event broker version ends in ISO 8601 date/time format.",
                  "format": "date-time",
                  "example": "2023-09-05T17:16:21Z"
               },
               "currentMcaVersion": {
                  "type": "string",
                  "description": "The current Mission Control Agent version.",
                  "example": "v1.20230905"
               },
               "recommended": {
                  "type": "boolean",
                  "description": "Indicates if the version is recommended.",
                  "example": true
               }
            },
            "description": "The event broker service version."
         },
         "EventBrokerServiceVersionsResponse": {
            "required": [
               "data",
               "meta"
            ],
            "type": "object",
            "properties": {
               "data": {
                  "type": "array",
                  "items": {
                     "$ref": "#/components/schemas/EventBrokerServiceVersion"
                  }
               },
               "meta": {
                  "type": "object",
                  "additionalProperties": {
                     "type": "object"
                  }
               }
            }
         },
         "ReleaseChannel": {
            "type": "string",
            "description": "\"The release channel indicates the type of release, either Production or Preview. The release types offer differing support and upgrade paths. See the documentation for more information.",
            "enum": [
               "PREVIEW",
               "PRODUCTION",
               "PRODUCTION_LTS",
               "DECLINED"
            ]
         }
      },
      "securitySchemes": {
         "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT"
         }
      }
   },
   "x-readme": {
      "explorer-enabled": true,
      "proxy-enabled": true
   }
}