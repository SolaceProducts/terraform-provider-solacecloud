// WARNING: You are using an OpenAPI 3.1.x specification, which is not yet supported by oapi-codegen (https://github.com/oapi-codegen/oapi-codegen/issues/373) and so some functionality may not be available. Until oapi-codegen supports OpenAPI 3.1, it is recommended to downgrade your spec to 3.0.x
// Package platform provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package platform

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	APITokenScopes = "APIToken.Scopes"
)

// Defines values for ClaimMappingRequestState.
const (
	ClaimMappingRequestStateDisabled ClaimMappingRequestState = "disabled"
	ClaimMappingRequestStateEnabled  ClaimMappingRequestState = "enabled"
)

// Defines values for ClaimMappingResponseState.
const (
	ClaimMappingResponseStateDisabled ClaimMappingResponseState = "disabled"
	ClaimMappingResponseStateEnabled  ClaimMappingResponseState = "enabled"
)

// Defines values for EnvironmentCreateRequestIcon.
const (
	EnvironmentCreateRequestIconBROKER        EnvironmentCreateRequestIcon = "BROKER"
	EnvironmentCreateRequestIconBUG           EnvironmentCreateRequestIcon = "BUG"
	EnvironmentCreateRequestIconCONSTRUCTION  EnvironmentCreateRequestIcon = "CONSTRUCTION"
	EnvironmentCreateRequestIconCONTENTSEARCH EnvironmentCreateRequestIcon = "CONTENT_SEARCH"
	EnvironmentCreateRequestIconDEPLOYEDCODE  EnvironmentCreateRequestIcon = "DEPLOYED_CODE"
	EnvironmentCreateRequestIconMAINTENANCE   EnvironmentCreateRequestIcon = "MAINTENANCE"
	EnvironmentCreateRequestIconNEWRELEASE    EnvironmentCreateRequestIcon = "NEW_RELEASE"
	EnvironmentCreateRequestIconROCKETLAUNCH  EnvironmentCreateRequestIcon = "ROCKET_LAUNCH"
	EnvironmentCreateRequestIconTERMINAL      EnvironmentCreateRequestIcon = "TERMINAL"
	EnvironmentCreateRequestIconTESTTUBE      EnvironmentCreateRequestIcon = "TEST_TUBE"
	EnvironmentCreateRequestIconTOOLKIT       EnvironmentCreateRequestIcon = "TOOLKIT"
	EnvironmentCreateRequestIconVERIFIED      EnvironmentCreateRequestIcon = "VERIFIED"
)

// Defines values for EnvironmentUpdateRequestIcon.
const (
	EnvironmentUpdateRequestIconBROKER        EnvironmentUpdateRequestIcon = "BROKER"
	EnvironmentUpdateRequestIconBUG           EnvironmentUpdateRequestIcon = "BUG"
	EnvironmentUpdateRequestIconCONSTRUCTION  EnvironmentUpdateRequestIcon = "CONSTRUCTION"
	EnvironmentUpdateRequestIconCONTENTSEARCH EnvironmentUpdateRequestIcon = "CONTENT_SEARCH"
	EnvironmentUpdateRequestIconDEPLOYEDCODE  EnvironmentUpdateRequestIcon = "DEPLOYED_CODE"
	EnvironmentUpdateRequestIconMAINTENANCE   EnvironmentUpdateRequestIcon = "MAINTENANCE"
	EnvironmentUpdateRequestIconNEWRELEASE    EnvironmentUpdateRequestIcon = "NEW_RELEASE"
	EnvironmentUpdateRequestIconROCKETLAUNCH  EnvironmentUpdateRequestIcon = "ROCKET_LAUNCH"
	EnvironmentUpdateRequestIconTERMINAL      EnvironmentUpdateRequestIcon = "TERMINAL"
	EnvironmentUpdateRequestIconTESTTUBE      EnvironmentUpdateRequestIcon = "TEST_TUBE"
	EnvironmentUpdateRequestIconTOOLKIT       EnvironmentUpdateRequestIcon = "TOOLKIT"
	EnvironmentUpdateRequestIconVERIFIED      EnvironmentUpdateRequestIcon = "VERIFIED"
)

// Defines values for OrganizationContactContactType.
const (
	OrganizationContactContactTypeEXTERNALALERTS        OrganizationContactContactType = "EXTERNAL_ALERTS"
	OrganizationContactContactTypeEXTERNALNOTIFICATIONS OrganizationContactContactType = "EXTERNAL_NOTIFICATIONS"
	OrganizationContactContactTypeINTERNAL              OrganizationContactContactType = "INTERNAL"
)

// Defines values for OrganizationInfoOrganizationType.
const (
	OrganizationInfoOrganizationTypeBOOMI      OrganizationInfoOrganizationType = "BOOMI"
	OrganizationInfoOrganizationTypeENTERPRISE OrganizationInfoOrganizationType = "ENTERPRISE"
	OrganizationInfoOrganizationTypeINTERNAL   OrganizationInfoOrganizationType = "INTERNAL"
	OrganizationInfoOrganizationTypePOC        OrganizationInfoOrganizationType = "POC"
	OrganizationInfoOrganizationTypeSAP        OrganizationInfoOrganizationType = "SAP"
	OrganizationInfoOrganizationTypeSTANDARD   OrganizationInfoOrganizationType = "STANDARD"
	OrganizationInfoOrganizationTypeTRIAL      OrganizationInfoOrganizationType = "TRIAL"
)

// Defines values for ResourceType.
const (
	ResourceTypeApplicationDomain  ResourceType = "application_domain"
	ResourceTypeEnvironment        ResourceType = "environment"
	ResourceTypeEventBrokerService ResourceType = "event_broker_service"
)

// Defines values for GetMyContactsParamsContactType.
const (
	GetMyContactsParamsContactTypeEXTERNALALERTS        GetMyContactsParamsContactType = "EXTERNAL_ALERTS"
	GetMyContactsParamsContactTypeEXTERNALNOTIFICATIONS GetMyContactsParamsContactType = "EXTERNAL_NOTIFICATIONS"
)

// Defines values for UpdateMyContactsParamsContactType.
const (
	UpdateMyContactsParamsContactTypeEXTERNALALERTS        UpdateMyContactsParamsContactType = "EXTERNAL_ALERTS"
	UpdateMyContactsParamsContactTypeEXTERNALNOTIFICATIONS UpdateMyContactsParamsContactType = "EXTERNAL_NOTIFICATIONS"
)

// Defines values for SearchEnvironmentsParamsSort.
const (
	CreatedAtASC  SearchEnvironmentsParamsSort = "createdAt:ASC"
	CreatedAtDESC SearchEnvironmentsParamsSort = "createdAt:DESC"
	IdASC         SearchEnvironmentsParamsSort = "id:ASC"
	IdDESC        SearchEnvironmentsParamsSort = "id:DESC"
	NameASC       SearchEnvironmentsParamsSort = "name:ASC"
	NameDESC      SearchEnvironmentsParamsSort = "name:DESC"
	UpdatedAtASC  SearchEnvironmentsParamsSort = "updatedAt:ASC"
	UpdatedAtDESC SearchEnvironmentsParamsSort = "updatedAt:DESC"
)

// Defines values for GetResourceAssignmentsParamsResourceType.
const (
	GetResourceAssignmentsParamsResourceTypeApplicationDomain  GetResourceAssignmentsParamsResourceType = "application_domain"
	GetResourceAssignmentsParamsResourceTypeEnvironment        GetResourceAssignmentsParamsResourceType = "environment"
	GetResourceAssignmentsParamsResourceTypeEventBrokerService GetResourceAssignmentsParamsResourceType = "event_broker_service"
)

// Defines values for SaveResourceAssignmentsParamsResourceType.
const (
	ApplicationDomain  SaveResourceAssignmentsParamsResourceType = "application_domain"
	Environment        SaveResourceAssignmentsParamsResourceType = "environment"
	EventBrokerService SaveResourceAssignmentsParamsResourceType = "event_broker_service"
)

// Defines values for GetUserGroupsParamsSort.
const (
	NameAsc  GetUserGroupsParamsSort = "name:asc"
	NameDesc GetUserGroupsParamsSort = "name:desc"
)

// CategoryJSON defines model for CategoryJSON.
type CategoryJSON struct {
	CategoryId  *string `json:"categoryId,omitempty"`
	Description *string `json:"description,omitempty"`
	Order       *int32  `json:"order,omitempty"`
}

// ClaimMappingRequest defines model for ClaimMappingRequest.
type ClaimMappingRequest struct {
	// ClaimKey The claim key or name of the token issued by the identity provider (IdP).
	ClaimKey string `json:"claimKey"`

	// ClaimValueToGroupsMapping The claim mapping. A claim mapping is the value from the claim to the unique identifiers of the user groups.
	ClaimValueToGroupsMapping map[string][]openapi_types.UUID `json:"claimValueToGroupsMapping"`

	// DefaultGroupId The unique identifier of the user group to assign to a user when user's claim doesn't match any of the claims in the account (organization).
	DefaultGroupId *openapi_types.UUID `json:"defaultGroupId,omitempty"`

	// JustInTimeProvisioning Indicates whether to allow Just-In-Time (JIT). The valid values are 'true' (enable) or 'false' (disable). The default is 'false'.
	JustInTimeProvisioning *bool `json:"justInTimeProvisioning,omitempty"`

	// State The state of the claim mapping. The following states are:<ul><li>`enabled`- Use the claim mapping. Users that log in using SSO are mapped to specified roles.</li><li>`disabled`- To not use the claim mapping. Users that log in using SSO are not mapped to the specified roles.</li></ul>
	State ClaimMappingRequestState `json:"state"`
}

// ClaimMappingRequestState The state of the claim mapping. The following states are:<ul><li>`enabled`- Use the claim mapping. Users that log in using SSO are mapped to specified roles.</li><li>`disabled`- To not use the claim mapping. Users that log in using SSO are not mapped to the specified roles.</li></ul>
type ClaimMappingRequestState string

// ClaimMappingResponse defines model for ClaimMappingResponse.
type ClaimMappingResponse struct {
	// ClaimKey The claim key or name of the token issued by the identity provider (IdP).
	ClaimKey *string `json:"claimKey,omitempty"`

	// ClaimValueToGroupsMapping The claim mapping. A claim mapping is the value from the claim to the unique identifiers of the user groups.
	ClaimValueToGroupsMapping *map[string][]openapi_types.UUID `json:"claimValueToGroupsMapping,omitempty"`

	// DefaultGroupId The unique identifier of the user group to assign to a user when user's claim doesn't match any of the claims in the account (organization).
	DefaultGroupId *openapi_types.UUID `json:"defaultGroupId,omitempty"`

	// JustInTimeProvisioning Indicates whether to allow Just-In-Time (JIT). The valid values are 'true' (enable) or 'false' (disable). The default is 'false'.
	JustInTimeProvisioning *bool `json:"justInTimeProvisioning,omitempty"`

	// State The state of the claim mapping. The following states are:<ul><li>`enabled`- Use the claim mapping. Users that log in using SSO are mapped to specified roles.</li><li>`disabled`- To not use the claim mapping. Users that log in using SSO are not mapped to the specified roles.</li></ul>
	State *ClaimMappingResponseState `json:"state,omitempty"`
}

// ClaimMappingResponseState The state of the claim mapping. The following states are:<ul><li>`enabled`- Use the claim mapping. Users that log in using SSO are mapped to specified roles.</li><li>`disabled`- To not use the claim mapping. Users that log in using SSO are not mapped to the specified roles.</li></ul>
type ClaimMappingResponseState string

// ClaimMappingResponseEnvelope defines model for ClaimMappingResponseEnvelope.
type ClaimMappingResponseEnvelope struct {
	Data     *ClaimMappingResponse     `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// Envelope defines model for Envelope.
type Envelope struct {
	Data     *[]OrganizationContact    `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// EnvironmentCreateRequest defines model for EnvironmentCreateRequest.
type EnvironmentCreateRequest struct {
	// BgColor Specify the RGB hexadecimal color code for the environment's background.
	// You can use 6-digit (opaque) or 8-digit (alpha) hex color codes.
	BgColor     *string `json:"bgColor,omitempty"`
	Description *string `json:"description,omitempty"`

	// FgColor Specify the RGB hexadecimal color code for the environment's foreground.
	// You can use 6-digit (opaque) or 8-digit (alpha) hex color codes.
	FgColor *string `json:"fgColor,omitempty"`

	// Icon Specify the name of the icon to use for the environment.
	Icon *EnvironmentCreateRequestIcon `json:"icon,omitempty"`

	// IsDefault Indicates whether this is the organization’s default environment. The default value is false. The valid values are:
	// <ul>
	//     <li>true: The environment is the default.</li>
	//     <li>false: The environment is not default.</li>
	//     </ul>
	IsDefault *bool `json:"isDefault,omitempty"`

	// IsProduction Indicates whether this is an organization’s production environment. The default value is true. The valid values are:
	// <ul>
	//     <li>true: The environment is a production environment.</li>
	//     <li>false: The environment is not a production environment.</li>
	// </ul>
	// <p>This is an immutable field. If an environment needs to be migrated, architecture can be migrated to a new environment
	// with the desired environment type instead.</p>
	IsProduction *bool  `json:"isProduction,omitempty"`
	Name         string `json:"name"`
}

// EnvironmentCreateRequestIcon Specify the name of the icon to use for the environment.
type EnvironmentCreateRequestIcon string

// EnvironmentResponse defines model for EnvironmentResponse.
type EnvironmentResponse struct {
	BgColor      *string           `json:"bgColor,omitempty"`
	CreatedBy    *string           `json:"createdBy,omitempty"`
	CreatedTime  *string           `json:"createdTime,omitempty"`
	Description  *string           `json:"description,omitempty"`
	FgColor      *string           `json:"fgColor,omitempty"`
	Icon         *string           `json:"icon,omitempty"`
	Id           *string           `json:"id,omitempty"`
	IsDefault    *bool             `json:"isDefault,omitempty"`
	IsProduction *bool             `json:"isProduction,omitempty"`
	Name         string            `json:"name"`
	Organization *OrganizationInfo `json:"organization,omitempty"`
	Type         *string           `json:"type,omitempty"`
	UpdatedBy    *string           `json:"updatedBy,omitempty"`
	UpdatedTime  *string           `json:"updatedTime,omitempty"`
}

// EnvironmentResponseEnvelope defines model for EnvironmentResponseEnvelope.
type EnvironmentResponseEnvelope struct {
	Data     *EnvironmentResponse      `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// EnvironmentUpdateRequest defines model for EnvironmentUpdateRequest.
type EnvironmentUpdateRequest struct {
	// BgColor Specify the RGB hexadecimal color code for the environment's background.
	// You can use 6-digit (opaque) or 8-digit (alpha) hex color codes.
	BgColor     *string `json:"bgColor,omitempty"`
	Description *string `json:"description,omitempty"`

	// FgColor Specify the RGB hexadecimal color code for the environment's foreground.
	// You can use 6-digit (opaque) or 8-digit (alpha) hex color codes.
	FgColor *string `json:"fgColor,omitempty"`

	// Icon Specify the name of the icon to use for the environment.
	Icon *EnvironmentUpdateRequestIcon `json:"icon,omitempty"`

	// IsDefault Indicates whether this is the organization’s default environment. The default value is false. The valid values are:
	// <ul>
	//     <li>true: The environment is the default.</li>
	//     <li>false: The environment is not default.</li>
	//     </ul>
	IsDefault *bool   `json:"isDefault,omitempty"`
	Name      *string `json:"name,omitempty"`
}

// EnvironmentUpdateRequestIcon Specify the name of the icon to use for the environment.
type EnvironmentUpdateRequestIcon string

// EnvironmentsResponseEnvelope defines model for EnvironmentsResponseEnvelope.
type EnvironmentsResponseEnvelope struct {
	Data     *[]EnvironmentResponse    `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// ErrorId The UUID (Universally Unique Identifier) that is logged with an appropriate stack trace for a WARN or ERROR log that allows support to better determine what cause the error.
	ErrorId *string `json:"errorId,omitempty"`

	// Message A user-friendly message that describes the error.
	Message *string `json:"message,omitempty"`

	// Meta The metadata about the error. This provides additional information about the error that occurred.
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`

	// ValidationDetails When applicable, these are the details of issues with the fields provided for the REST call.
	ValidationDetails *map[string][]string `json:"validationDetails,omitempty"`
}

// GroupInfo defines model for GroupInfo.
type GroupInfo struct {
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// LevelJSON defines model for LevelJSON.
type LevelJSON struct {
	Description *string `json:"description,omitempty"`
	Order       *int32  `json:"order,omitempty"`
}

// OrganizationContact defines model for OrganizationContact.
type OrganizationContact struct {
	// ContactType The type of notification that is sent to the contact's email. The allowed contact types are: <ul><li>'INTERNAL' - Internal notifications.</li><li>'EXTERNAL_ALERTS'- External alerts. </li><li>'EXTERNAL_NOTIFICATIONS'- External notifications. </li></ul>
	ContactType *OrganizationContactContactType `json:"contactType,omitempty"`

	// Email The email address of the organization contact.
	Email *string `json:"email,omitempty"`

	// Id The unique identifier for the organization contact.
	Id *string `json:"id,omitempty"`

	// Type The type of object for informational purposes.
	Type *string `json:"type,omitempty"`
}

// OrganizationContactContactType The type of notification that is sent to the contact's email. The allowed contact types are: <ul><li>'INTERNAL' - Internal notifications.</li><li>'EXTERNAL_ALERTS'- External alerts. </li><li>'EXTERNAL_NOTIFICATIONS'- External notifications. </li></ul>
type OrganizationContactContactType string

// OrganizationInfo defines model for OrganizationInfo.
type OrganizationInfo struct {
	Id               *string                           `json:"id,omitempty"`
	Internal         *bool                             `json:"internal,omitempty"`
	Name             *string                           `json:"name,omitempty"`
	OrganizationType *OrganizationInfoOrganizationType `json:"organizationType,omitempty"`
}

// OrganizationInfoOrganizationType defines model for OrganizationInfo.OrganizationType.
type OrganizationInfoOrganizationType string

// Permission defines model for Permission.
type Permission struct {
	Description    *string         `json:"description,omitempty"`
	Id             *string         `json:"id,omitempty"`
	Name           *string         `json:"name,omitempty"`
	PermissionTags *PermissionTags `json:"permissionTags,omitempty"`
	Type           *string         `json:"type,omitempty"`
	Visible        *bool           `json:"visible,omitempty"`
}

// PermissionTags defines model for PermissionTags.
type PermissionTags struct {
	Category    *CategoryJSON `json:"category,omitempty"`
	Description *string       `json:"description,omitempty"`
	Level       *LevelJSON    `json:"level,omitempty"`
}

// ResourceAssignment defines model for ResourceAssignment.
type ResourceAssignment struct {
	// ResourceId The unique identifier of the resource.
	ResourceId *string `json:"resourceId,omitempty"`

	// ResourceType The type of resource to assign.
	// - 'application_domain' : A logical area within Event Portal where organizations create and manage objects that represent the components of your event-driven architecture.
	// - 'event_broker_service' : An event broker service within Mission Control Cluster Manager.
	// - 'environment' : An environment within Event Portal.<Review>
	ResourceType *ResourceType `json:"resourceType,omitempty"`

	// RrbacRoleId The unique identifier of the role.
	RrbacRoleId *string `json:"rrbacRoleId,omitempty"`

	// UserGroupId The unique identifier for the user group.
	UserGroupId *openapi_types.UUID `json:"userGroupId,omitempty"`

	// UserId The unique identifier for the user.
	UserId *string `json:"userId,omitempty"`
}

// ResourceAssignmentUpdate defines model for ResourceAssignmentUpdate.
type ResourceAssignmentUpdate struct {
	// RrbacRoleId The unique identifier of the role.
	RrbacRoleId *string `json:"rrbacRoleId,omitempty"`

	// UserGroupId The unique identifier for the user group.
	UserGroupId *openapi_types.UUID `json:"userGroupId,omitempty"`

	// UserId The unique identifier for the user.<p>You cannot assign the 'event_broker_service' resource type to a userId object. You can only assign them to userGroupId objects in organizations with single sign-on enabled.</p>
	UserId *string `json:"userId,omitempty"`
}

// ResourceAssignmentsResponseEnvelope defines model for ResourceAssignmentsResponseEnvelope.
type ResourceAssignmentsResponseEnvelope struct {
	Data     *[]ResourceAssignment     `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// ResourceType The type of resource to assign.
// - 'application_domain' : A logical area within Event Portal where organizations create and manage objects that represent the components of your event-driven architecture.
// - 'event_broker_service' : An event broker service within Mission Control Cluster Manager.
// - 'environment' : An environment within Event Portal.<Review>
type ResourceType string

// Role defines model for Role.
type Role struct {
	// Description The description of the role.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the role.
	Id *string `json:"id,omitempty"`

	// Name The name of the role.
	Name *string `json:"name,omitempty"`

	// Permissions The permissions of the role.
	Permissions *[]Permission `json:"permissions,omitempty"`
	Type        *string       `json:"type,omitempty"`
}

// RolesResponseEnvelope defines model for RolesResponseEnvelope.
type RolesResponseEnvelope struct {
	Data     *[]Role                   `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// UserGroupRequest defines model for UserGroupRequest.
type UserGroupRequest struct {
	// Description A description of the user group.
	Description *string `json:"description,omitempty"`

	// Name The name of the user group.
	Name string `json:"name"`

	// Roles A collection of unique identifiers representing the roles assigned to the user group.
	Roles *[]string `json:"roles,omitempty"`
}

// UserGroupResponse defines model for UserGroupResponse.
type UserGroupResponse struct {
	// Description A description of the user group.
	Description *string `json:"description,omitempty"`

	// Id The unique identifier for the user group.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Name The name of the user group.
	Name *string `json:"name,omitempty"`

	// OrganizationId The unique identifier for the account (organization).
	OrganizationId *string `json:"organizationId,omitempty"`

	// Roles A collection of unique identifiers representing the roles assigned to the user group.
	Roles *[]string `json:"roles,omitempty"`
}

// UserGroupResponseEnvelope defines model for UserGroupResponseEnvelope.
type UserGroupResponseEnvelope struct {
	Data     *UserGroupResponse        `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// UserGroupsResponseEnvelope defines model for UserGroupsResponseEnvelope.
type UserGroupsResponseEnvelope struct {
	Data     *[]UserGroupResponse      `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// Email The email address of the user.
	Email *string `json:"email,omitempty"`

	// FirstName The first name of the user.
	FirstName *string `json:"firstName,omitempty"`

	// Groups The names and ids of the groups of the user.
	Groups *[]GroupInfo `json:"groups,omitempty"`

	// Id The unique identifier for the user.
	Id *string `json:"id,omitempty"`

	// LastName The last name of the user.
	LastName *string `json:"lastName,omitempty"`

	// OrganizationId The unique identifier for the account (organization).
	OrganizationId *string `json:"organizationId,omitempty"`

	// Roles The ids of the roles of the user.
	Roles *[]string `json:"roles,omitempty"`

	// State The state of the user in the account (organization). The state includes:<ul><li>'NEVER_ACTIVATED'-The user was not activated.</li><li>'INVITED'-The user was invited to join the account.</li><li>'ACTIVE'-The user is active in the account.</li></ul>
	State *string `json:"state,omitempty"`

	// Type The type of object for informational purposes.
	Type *string `json:"type,omitempty"`

	// UserAttributes Additional information about the user.
	UserAttributes *map[string]string `json:"userAttributes,omitempty"`
}

// UsersResponseEnvelope defines model for UsersResponseEnvelope.
type UsersResponseEnvelope struct {
	Data     *[]UserResponse           `json:"data,omitempty"`
	Included *[]map[string]interface{} `json:"included,omitempty"`

	// Meta <p>The metadata about the response, which can include:</p><ul><li>Pagination data, such as page number, page size, etc. for GET operations that return large amount of response data. For more information, see <a href="./pagination">Pagination</a>.</li><li>Timestamp information, such as current time, or the time create or update operation occurred for CREATE, PUT, POST operations.</li></ul>
	Meta *map[string]map[string]interface{} `json:"meta,omitempty"`
}

// GetMyContactsParams defines parameters for GetMyContacts.
type GetMyContactsParams struct {
	// ContactType The type of contact to filter by. The allowed contact types are: <ul><li>`EXTERNAL_ALERTS`-The contacts for operational alerts, such as event broker outages or issues with the platform.</li><li>`EXTERNAL_NOTIFICATIONS`-The contacts for operational notifications about the platform, such as event broker upgrades, upcoming deprecation notices, and event broker update announcements.</li></ul>
	ContactType *GetMyContactsParamsContactType `form:"contactType,omitempty" json:"contactType,omitempty"`
}

// GetMyContactsParamsContactType defines parameters for GetMyContacts.
type GetMyContactsParamsContactType string

// UpdateMyContactsJSONBody defines parameters for UpdateMyContacts.
type UpdateMyContactsJSONBody = []string

// UpdateMyContactsParamsContactType defines parameters for UpdateMyContacts.
type UpdateMyContactsParamsContactType string

// SearchEnvironmentsParams defines parameters for SearchEnvironments.
type SearchEnvironmentsParams struct {
	// PageSize The number of environments to get per page.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageNumber The page number to get.
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// Name Name of the environment to match on.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Sort The query (fieldName:<ASC/DESC>) used to sort the environment list in the response
	Sort *SearchEnvironmentsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// SearchEnvironmentsParamsSort defines parameters for SearchEnvironments.
type SearchEnvironmentsParamsSort string

// GetResourceAssignmentsParams defines parameters for GetResourceAssignments.
type GetResourceAssignmentsParams struct {
	// ResourceId The unique identifier for the resource
	ResourceId *string `form:"resourceId,omitempty" json:"resourceId,omitempty"`

	// ResourceType The type of resource to assign.
	// - 'application_domain' : A logical area within Event Portal where organizations create and manage objects that represent the components of your event-driven architecture.
	// - 'event_broker_service' : An event broker service within Mission Control Cluster Manager.
	// - 'environment' : An environment within Event Portal.<Review>
	ResourceType *GetResourceAssignmentsParamsResourceType `form:"resourceType,omitempty" json:"resourceType,omitempty"`
}

// GetResourceAssignmentsParamsResourceType defines parameters for GetResourceAssignments.
type GetResourceAssignmentsParamsResourceType string

// SaveResourceAssignmentsJSONBody defines parameters for SaveResourceAssignments.
type SaveResourceAssignmentsJSONBody = []ResourceAssignmentUpdate

// SaveResourceAssignmentsParams defines parameters for SaveResourceAssignments.
type SaveResourceAssignmentsParams struct {
	// ResourceId The unique identifier for the resource
	ResourceId string `form:"resourceId" json:"resourceId"`

	// ResourceType The type of resource to assign.
	// - 'application_domain' : A logical area within Event Portal where organizations create and manage objects that represent the components of your event-driven architecture.
	// - 'event_broker_service' : An event broker service within Mission Control Cluster Manager. <Review>
	ResourceType SaveResourceAssignmentsParamsResourceType `form:"resourceType" json:"resourceType"`
}

// SaveResourceAssignmentsParamsResourceType defines parameters for SaveResourceAssignments.
type SaveResourceAssignmentsParamsResourceType string

// GetUserGroupsParams defines parameters for GetUserGroups.
type GetUserGroupsParams struct {
	// PageSize The number of user groups to get per page.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// PageNumber The page number to retrieve.
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// Name The name of user group.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Sort The query (fieldName:<asc/desc>) used to sort the list in the response.
	Sort *GetUserGroupsParamsSort `form:"sort,omitempty" json:"sort,omitempty"`
}

// GetUserGroupsParamsSort defines parameters for GetUserGroups.
type GetUserGroupsParamsSort string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// PageNumber The page number to retrieve.
	PageNumber *int `form:"pageNumber,omitempty" json:"pageNumber,omitempty"`

	// PageSize The number of users to return on each page.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Name The name of the user. You can enter a partial string into the field to match multiple users.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Email The email address of the user. You can enter a partial string into the field to match multiple users.
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// Ids The list of unique identifiers for users.
	Ids *[]string `form:"ids,omitempty" json:"ids,omitempty"`

	// Roles The unique identifiers of the roles that are assigned to the user.
	Roles *[]string `form:"roles,omitempty" json:"roles,omitempty"`

	// Groups The unique identifiers of the groups that are assigned to the user.
	Groups *[]string `form:"groups,omitempty" json:"groups,omitempty"`
}

// UpdateMyContactsJSONRequestBody defines body for UpdateMyContacts for application/json ContentType.
type UpdateMyContactsJSONRequestBody = UpdateMyContactsJSONBody

// CreateEnvironmentJSONRequestBody defines body for CreateEnvironment for application/json ContentType.
type CreateEnvironmentJSONRequestBody = EnvironmentCreateRequest

// PatchEnvironmentJSONRequestBody defines body for PatchEnvironment for application/json ContentType.
type PatchEnvironmentJSONRequestBody = EnvironmentUpdateRequest

// UpdateEnvironmentJSONRequestBody defines body for UpdateEnvironment for application/json ContentType.
type UpdateEnvironmentJSONRequestBody = EnvironmentUpdateRequest

// SaveResourceAssignmentsJSONRequestBody defines body for SaveResourceAssignments for application/json ContentType.
type SaveResourceAssignmentsJSONRequestBody = SaveResourceAssignmentsJSONBody

// SaveClaimMappingsJSONRequestBody defines body for SaveClaimMappings for application/json ContentType.
type SaveClaimMappingsJSONRequestBody = ClaimMappingRequest

// CreateUserGroupJSONRequestBody defines body for CreateUserGroup for application/json ContentType.
type CreateUserGroupJSONRequestBody = UserGroupRequest

// UpdateUserGroupJSONRequestBody defines body for UpdateUserGroup for application/json ContentType.
type UpdateUserGroupJSONRequestBody = UserGroupRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMyContacts request
	GetMyContacts(ctx context.Context, params *GetMyContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMyContactsWithBody request with any body
	UpdateMyContactsWithBody(ctx context.Context, contactType UpdateMyContactsParamsContactType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMyContacts(ctx context.Context, contactType UpdateMyContactsParamsContactType, body UpdateMyContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchEnvironments request
	SearchEnvironments(ctx context.Context, params *SearchEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEnvironmentWithBody request with any body
	CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEnvironment(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEnvironmentById request
	DeleteEnvironmentById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEnvironmentById request
	GetEnvironmentById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchEnvironmentWithBody request with any body
	PatchEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchEnvironment(ctx context.Context, id string, body PatchEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEnvironmentWithBody request with any body
	UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEnvironment(ctx context.Context, id string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoles request
	GetRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResourceAssignments request
	GetResourceAssignments(ctx context.Context, params *GetResourceAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SaveResourceAssignmentsWithBody request with any body
	SaveResourceAssignmentsWithBody(ctx context.Context, params *SaveResourceAssignmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SaveResourceAssignments(ctx context.Context, params *SaveResourceAssignmentsParams, body SaveResourceAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetClaimMappings request
	GetClaimMappings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SaveClaimMappingsWithBody request with any body
	SaveClaimMappingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SaveClaimMappings(ctx context.Context, body SaveClaimMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroups request
	GetUserGroups(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserGroupWithBody request with any body
	CreateUserGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserGroup(ctx context.Context, body CreateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserGroup request
	DeleteUserGroup(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserGroup request
	GetUserGroup(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserGroupWithBody request with any body
	UpdateUserGroupWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserGroup(ctx context.Context, id openapi_types.UUID, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMyContacts(ctx context.Context, params *GetMyContactsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyContactsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMyContactsWithBody(ctx context.Context, contactType UpdateMyContactsParamsContactType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMyContactsRequestWithBody(c.Server, contactType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMyContacts(ctx context.Context, contactType UpdateMyContactsParamsContactType, body UpdateMyContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMyContactsRequest(c.Server, contactType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchEnvironments(ctx context.Context, params *SearchEnvironmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchEnvironmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEnvironment(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEnvironmentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEnvironmentById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEnvironmentByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEnvironmentById(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEnvironmentByIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEnvironment(ctx context.Context, id string, body PatchEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEnvironmentRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironmentWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEnvironment(ctx context.Context, id string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEnvironmentRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResourceAssignments(ctx context.Context, params *GetResourceAssignmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResourceAssignmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveResourceAssignmentsWithBody(ctx context.Context, params *SaveResourceAssignmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveResourceAssignmentsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveResourceAssignments(ctx context.Context, params *SaveResourceAssignmentsParams, body SaveResourceAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveResourceAssignmentsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetClaimMappings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetClaimMappingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveClaimMappingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveClaimMappingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SaveClaimMappings(ctx context.Context, body SaveClaimMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSaveClaimMappingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroups(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserGroup(ctx context.Context, body CreateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserGroup(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserGroup(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserGroupWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserGroupRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserGroup(ctx context.Context, id openapi_types.UUID, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserGroupRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMyContactsRequest generates requests for GetMyContacts
func NewGetMyContactsRequest(server string, params *GetMyContactsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/contacts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ContactType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contactType", runtime.ParamLocationQuery, *params.ContactType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMyContactsRequest calls the generic UpdateMyContacts builder with application/json body
func NewUpdateMyContactsRequest(server string, contactType UpdateMyContactsParamsContactType, body UpdateMyContactsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMyContactsRequestWithBody(server, contactType, "application/json", bodyReader)
}

// NewUpdateMyContactsRequestWithBody generates requests for UpdateMyContacts with any type of body
func NewUpdateMyContactsRequestWithBody(server string, contactType UpdateMyContactsParamsContactType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contactType", runtime.ParamLocationPath, contactType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/contacts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchEnvironmentsRequest generates requests for SearchEnvironments
func NewSearchEnvironmentsRequest(server string, params *SearchEnvironmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEnvironmentRequest calls the generic CreateEnvironment builder with application/json body
func NewCreateEnvironmentRequest(server string, body CreateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEnvironmentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEnvironmentRequestWithBody generates requests for CreateEnvironment with any type of body
func NewCreateEnvironmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/environments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEnvironmentByIdRequest generates requests for DeleteEnvironmentById
func NewDeleteEnvironmentByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEnvironmentByIdRequest generates requests for GetEnvironmentById
func NewGetEnvironmentByIdRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchEnvironmentRequest calls the generic PatchEnvironment builder with application/json body
func NewPatchEnvironmentRequest(server string, id string, body PatchEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchEnvironmentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPatchEnvironmentRequestWithBody generates requests for PatchEnvironment with any type of body
func NewPatchEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateEnvironmentRequest calls the generic UpdateEnvironment builder with application/json body
func NewUpdateEnvironmentRequest(server string, id string, body UpdateEnvironmentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEnvironmentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateEnvironmentRequestWithBody generates requests for UpdateEnvironment with any type of body
func NewUpdateEnvironmentRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/environments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRolesRequest generates requests for GetRoles
func NewGetRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResourceAssignmentsRequest generates requests for GetResourceAssignments
func NewGetResourceAssignmentsRequest(server string, params *GetResourceAssignmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/rrbac/resourceAssignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ResourceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceId", runtime.ParamLocationQuery, *params.ResourceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSaveResourceAssignmentsRequest calls the generic SaveResourceAssignments builder with application/json body
func NewSaveResourceAssignmentsRequest(server string, params *SaveResourceAssignmentsParams, body SaveResourceAssignmentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSaveResourceAssignmentsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewSaveResourceAssignmentsRequestWithBody generates requests for SaveResourceAssignments with any type of body
func NewSaveResourceAssignmentsRequestWithBody(server string, params *SaveResourceAssignmentsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/rrbac/resourceAssignments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceId", runtime.ParamLocationQuery, params.ResourceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetClaimMappingsRequest generates requests for GetClaimMappings
func NewGetClaimMappingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/sso/idpClaimMappings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSaveClaimMappingsRequest calls the generic SaveClaimMappings builder with application/json body
func NewSaveClaimMappingsRequest(server string, body SaveClaimMappingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSaveClaimMappingsRequestWithBody(server, "application/json", bodyReader)
}

// NewSaveClaimMappingsRequestWithBody generates requests for SaveClaimMappings with any type of body
func NewSaveClaimMappingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/sso/idpClaimMappings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserGroupsRequest generates requests for GetUserGroups
func NewGetUserGroupsRequest(server string, params *GetUserGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/userGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserGroupRequest calls the generic CreateUserGroup builder with application/json body
func NewCreateUserGroupRequest(server string, body CreateUserGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserGroupRequestWithBody generates requests for CreateUserGroup with any type of body
func NewCreateUserGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/userGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserGroupRequest generates requests for DeleteUserGroup
func NewDeleteUserGroupRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/userGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserGroupRequest generates requests for GetUserGroup
func NewGetUserGroupRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/userGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserGroupRequest calls the generic UpdateUserGroup builder with application/json body
func NewUpdateUserGroupRequest(server string, id openapi_types.UUID, body UpdateUserGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserGroupRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateUserGroupRequestWithBody generates requests for UpdateUserGroup with any type of body
func NewUpdateUserGroupRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/userGroups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/platform/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageNumber", runtime.ParamLocationQuery, *params.PageNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Email != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Roles != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "roles", runtime.ParamLocationQuery, *params.Roles); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Groups != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "groups", runtime.ParamLocationQuery, *params.Groups); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMyContactsWithResponse request
	GetMyContactsWithResponse(ctx context.Context, params *GetMyContactsParams, reqEditors ...RequestEditorFn) (*GetMyContactsResponse, error)

	// UpdateMyContactsWithBodyWithResponse request with any body
	UpdateMyContactsWithBodyWithResponse(ctx context.Context, contactType UpdateMyContactsParamsContactType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMyContactsResponse, error)

	UpdateMyContactsWithResponse(ctx context.Context, contactType UpdateMyContactsParamsContactType, body UpdateMyContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMyContactsResponse, error)

	// SearchEnvironmentsWithResponse request
	SearchEnvironmentsWithResponse(ctx context.Context, params *SearchEnvironmentsParams, reqEditors ...RequestEditorFn) (*SearchEnvironmentsResponse, error)

	// CreateEnvironmentWithBodyWithResponse request with any body
	CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	CreateEnvironmentWithResponse(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error)

	// DeleteEnvironmentByIdWithResponse request
	DeleteEnvironmentByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentByIdResponse, error)

	// GetEnvironmentByIdWithResponse request
	GetEnvironmentByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentByIdResponse, error)

	// PatchEnvironmentWithBodyWithResponse request with any body
	PatchEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEnvironmentResponse, error)

	PatchEnvironmentWithResponse(ctx context.Context, id string, body PatchEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentResponse, error)

	// UpdateEnvironmentWithBodyWithResponse request with any body
	UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	UpdateEnvironmentWithResponse(ctx context.Context, id string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error)

	// GetRolesWithResponse request
	GetRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRolesResponse, error)

	// GetResourceAssignmentsWithResponse request
	GetResourceAssignmentsWithResponse(ctx context.Context, params *GetResourceAssignmentsParams, reqEditors ...RequestEditorFn) (*GetResourceAssignmentsResponse, error)

	// SaveResourceAssignmentsWithBodyWithResponse request with any body
	SaveResourceAssignmentsWithBodyWithResponse(ctx context.Context, params *SaveResourceAssignmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveResourceAssignmentsResponse, error)

	SaveResourceAssignmentsWithResponse(ctx context.Context, params *SaveResourceAssignmentsParams, body SaveResourceAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveResourceAssignmentsResponse, error)

	// GetClaimMappingsWithResponse request
	GetClaimMappingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClaimMappingsResponse, error)

	// SaveClaimMappingsWithBodyWithResponse request with any body
	SaveClaimMappingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveClaimMappingsResponse, error)

	SaveClaimMappingsWithResponse(ctx context.Context, body SaveClaimMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveClaimMappingsResponse, error)

	// GetUserGroupsWithResponse request
	GetUserGroupsWithResponse(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error)

	// CreateUserGroupWithBodyWithResponse request with any body
	CreateUserGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserGroupResponse, error)

	CreateUserGroupWithResponse(ctx context.Context, body CreateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserGroupResponse, error)

	// DeleteUserGroupWithResponse request
	DeleteUserGroupWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteUserGroupResponse, error)

	// GetUserGroupWithResponse request
	GetUserGroupWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserGroupResponse, error)

	// UpdateUserGroupWithBodyWithResponse request with any body
	UpdateUserGroupWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error)

	UpdateUserGroupWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)
}

type GetMyContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMyContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMyContactsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateMyContactsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMyContactsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchEnvironmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SearchEnvironmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchEnvironmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEnvironmentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteEnvironmentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEnvironmentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEnvironmentByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetEnvironmentByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEnvironmentByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PatchEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEnvironmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateEnvironmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEnvironmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesResponseEnvelope
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResourceAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetResourceAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResourceAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SaveResourceAssignmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SaveResourceAssignmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SaveResourceAssignmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClaimMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetClaimMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClaimMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SaveClaimMappingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SaveClaimMappingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SaveClaimMappingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMyContactsWithResponse request returning *GetMyContactsResponse
func (c *ClientWithResponses) GetMyContactsWithResponse(ctx context.Context, params *GetMyContactsParams, reqEditors ...RequestEditorFn) (*GetMyContactsResponse, error) {
	rsp, err := c.GetMyContacts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyContactsResponse(rsp)
}

// UpdateMyContactsWithBodyWithResponse request with arbitrary body returning *UpdateMyContactsResponse
func (c *ClientWithResponses) UpdateMyContactsWithBodyWithResponse(ctx context.Context, contactType UpdateMyContactsParamsContactType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMyContactsResponse, error) {
	rsp, err := c.UpdateMyContactsWithBody(ctx, contactType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMyContactsResponse(rsp)
}

func (c *ClientWithResponses) UpdateMyContactsWithResponse(ctx context.Context, contactType UpdateMyContactsParamsContactType, body UpdateMyContactsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMyContactsResponse, error) {
	rsp, err := c.UpdateMyContacts(ctx, contactType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMyContactsResponse(rsp)
}

// SearchEnvironmentsWithResponse request returning *SearchEnvironmentsResponse
func (c *ClientWithResponses) SearchEnvironmentsWithResponse(ctx context.Context, params *SearchEnvironmentsParams, reqEditors ...RequestEditorFn) (*SearchEnvironmentsResponse, error) {
	rsp, err := c.SearchEnvironments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchEnvironmentsResponse(rsp)
}

// CreateEnvironmentWithBodyWithResponse request with arbitrary body returning *CreateEnvironmentResponse
func (c *ClientWithResponses) CreateEnvironmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) CreateEnvironmentWithResponse(ctx context.Context, body CreateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEnvironmentResponse, error) {
	rsp, err := c.CreateEnvironment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEnvironmentResponse(rsp)
}

// DeleteEnvironmentByIdWithResponse request returning *DeleteEnvironmentByIdResponse
func (c *ClientWithResponses) DeleteEnvironmentByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteEnvironmentByIdResponse, error) {
	rsp, err := c.DeleteEnvironmentById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEnvironmentByIdResponse(rsp)
}

// GetEnvironmentByIdWithResponse request returning *GetEnvironmentByIdResponse
func (c *ClientWithResponses) GetEnvironmentByIdWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetEnvironmentByIdResponse, error) {
	rsp, err := c.GetEnvironmentById(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEnvironmentByIdResponse(rsp)
}

// PatchEnvironmentWithBodyWithResponse request with arbitrary body returning *PatchEnvironmentResponse
func (c *ClientWithResponses) PatchEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEnvironmentResponse, error) {
	rsp, err := c.PatchEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) PatchEnvironmentWithResponse(ctx context.Context, id string, body PatchEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEnvironmentResponse, error) {
	rsp, err := c.PatchEnvironment(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEnvironmentResponse(rsp)
}

// UpdateEnvironmentWithBodyWithResponse request with arbitrary body returning *UpdateEnvironmentResponse
func (c *ClientWithResponses) UpdateEnvironmentWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironmentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

func (c *ClientWithResponses) UpdateEnvironmentWithResponse(ctx context.Context, id string, body UpdateEnvironmentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEnvironmentResponse, error) {
	rsp, err := c.UpdateEnvironment(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEnvironmentResponse(rsp)
}

// GetRolesWithResponse request returning *GetRolesResponse
func (c *ClientWithResponses) GetRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRolesResponse, error) {
	rsp, err := c.GetRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRolesResponse(rsp)
}

// GetResourceAssignmentsWithResponse request returning *GetResourceAssignmentsResponse
func (c *ClientWithResponses) GetResourceAssignmentsWithResponse(ctx context.Context, params *GetResourceAssignmentsParams, reqEditors ...RequestEditorFn) (*GetResourceAssignmentsResponse, error) {
	rsp, err := c.GetResourceAssignments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResourceAssignmentsResponse(rsp)
}

// SaveResourceAssignmentsWithBodyWithResponse request with arbitrary body returning *SaveResourceAssignmentsResponse
func (c *ClientWithResponses) SaveResourceAssignmentsWithBodyWithResponse(ctx context.Context, params *SaveResourceAssignmentsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveResourceAssignmentsResponse, error) {
	rsp, err := c.SaveResourceAssignmentsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveResourceAssignmentsResponse(rsp)
}

func (c *ClientWithResponses) SaveResourceAssignmentsWithResponse(ctx context.Context, params *SaveResourceAssignmentsParams, body SaveResourceAssignmentsJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveResourceAssignmentsResponse, error) {
	rsp, err := c.SaveResourceAssignments(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveResourceAssignmentsResponse(rsp)
}

// GetClaimMappingsWithResponse request returning *GetClaimMappingsResponse
func (c *ClientWithResponses) GetClaimMappingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetClaimMappingsResponse, error) {
	rsp, err := c.GetClaimMappings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetClaimMappingsResponse(rsp)
}

// SaveClaimMappingsWithBodyWithResponse request with arbitrary body returning *SaveClaimMappingsResponse
func (c *ClientWithResponses) SaveClaimMappingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SaveClaimMappingsResponse, error) {
	rsp, err := c.SaveClaimMappingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveClaimMappingsResponse(rsp)
}

func (c *ClientWithResponses) SaveClaimMappingsWithResponse(ctx context.Context, body SaveClaimMappingsJSONRequestBody, reqEditors ...RequestEditorFn) (*SaveClaimMappingsResponse, error) {
	rsp, err := c.SaveClaimMappings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSaveClaimMappingsResponse(rsp)
}

// GetUserGroupsWithResponse request returning *GetUserGroupsResponse
func (c *ClientWithResponses) GetUserGroupsWithResponse(ctx context.Context, params *GetUserGroupsParams, reqEditors ...RequestEditorFn) (*GetUserGroupsResponse, error) {
	rsp, err := c.GetUserGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupsResponse(rsp)
}

// CreateUserGroupWithBodyWithResponse request with arbitrary body returning *CreateUserGroupResponse
func (c *ClientWithResponses) CreateUserGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserGroupResponse, error) {
	rsp, err := c.CreateUserGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateUserGroupWithResponse(ctx context.Context, body CreateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserGroupResponse, error) {
	rsp, err := c.CreateUserGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserGroupResponse(rsp)
}

// DeleteUserGroupWithResponse request returning *DeleteUserGroupResponse
func (c *ClientWithResponses) DeleteUserGroupWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteUserGroupResponse, error) {
	rsp, err := c.DeleteUserGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserGroupResponse(rsp)
}

// GetUserGroupWithResponse request returning *GetUserGroupResponse
func (c *ClientWithResponses) GetUserGroupWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUserGroupResponse, error) {
	rsp, err := c.GetUserGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserGroupResponse(rsp)
}

// UpdateUserGroupWithBodyWithResponse request with arbitrary body returning *UpdateUserGroupResponse
func (c *ClientWithResponses) UpdateUserGroupWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error) {
	rsp, err := c.UpdateUserGroupWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserGroupWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateUserGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserGroupResponse, error) {
	rsp, err := c.UpdateUserGroup(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserGroupResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// ParseGetMyContactsResponse parses an HTTP response from a GetMyContactsWithResponse call
func ParseGetMyContactsResponse(rsp *http.Response) (*GetMyContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseUpdateMyContactsResponse parses an HTTP response from a UpdateMyContactsWithResponse call
func ParseUpdateMyContactsResponse(rsp *http.Response) (*UpdateMyContactsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMyContactsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseSearchEnvironmentsResponse parses an HTTP response from a SearchEnvironmentsWithResponse call
func ParseSearchEnvironmentsResponse(rsp *http.Response) (*SearchEnvironmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchEnvironmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseCreateEnvironmentResponse parses an HTTP response from a CreateEnvironmentWithResponse call
func ParseCreateEnvironmentResponse(rsp *http.Response) (*CreateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseDeleteEnvironmentByIdResponse parses an HTTP response from a DeleteEnvironmentByIdWithResponse call
func ParseDeleteEnvironmentByIdResponse(rsp *http.Response) (*DeleteEnvironmentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEnvironmentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetEnvironmentByIdResponse parses an HTTP response from a GetEnvironmentByIdWithResponse call
func ParseGetEnvironmentByIdResponse(rsp *http.Response) (*GetEnvironmentByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEnvironmentByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParsePatchEnvironmentResponse parses an HTTP response from a PatchEnvironmentWithResponse call
func ParsePatchEnvironmentResponse(rsp *http.Response) (*PatchEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseUpdateEnvironmentResponse parses an HTTP response from a UpdateEnvironmentWithResponse call
func ParseUpdateEnvironmentResponse(rsp *http.Response) (*UpdateEnvironmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEnvironmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetRolesResponse parses an HTTP response from a GetRolesWithResponse call
func ParseGetRolesResponse(rsp *http.Response) (*GetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesResponseEnvelope
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetResourceAssignmentsResponse parses an HTTP response from a GetResourceAssignmentsWithResponse call
func ParseGetResourceAssignmentsResponse(rsp *http.Response) (*GetResourceAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResourceAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseSaveResourceAssignmentsResponse parses an HTTP response from a SaveResourceAssignmentsWithResponse call
func ParseSaveResourceAssignmentsResponse(rsp *http.Response) (*SaveResourceAssignmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SaveResourceAssignmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetClaimMappingsResponse parses an HTTP response from a GetClaimMappingsWithResponse call
func ParseGetClaimMappingsResponse(rsp *http.Response) (*GetClaimMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetClaimMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseSaveClaimMappingsResponse parses an HTTP response from a SaveClaimMappingsWithResponse call
func ParseSaveClaimMappingsResponse(rsp *http.Response) (*SaveClaimMappingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SaveClaimMappingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserGroupsResponse parses an HTTP response from a GetUserGroupsWithResponse call
func ParseGetUserGroupsResponse(rsp *http.Response) (*GetUserGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseCreateUserGroupResponse parses an HTTP response from a CreateUserGroupWithResponse call
func ParseCreateUserGroupResponse(rsp *http.Response) (*CreateUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseDeleteUserGroupResponse parses an HTTP response from a DeleteUserGroupWithResponse call
func ParseDeleteUserGroupResponse(rsp *http.Response) (*DeleteUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetUserGroupResponse parses an HTTP response from a GetUserGroupWithResponse call
func ParseGetUserGroupResponse(rsp *http.Response) (*GetUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseUpdateUserGroupResponse parses an HTTP response from a UpdateUserGroupWithResponse call
func ParseUpdateUserGroupResponse(rsp *http.Response) (*UpdateUserGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case rsp.StatusCode == 400:
		// Content-type (*/*) unsupported

	}

	return response, nil
}
